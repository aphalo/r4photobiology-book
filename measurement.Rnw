<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Importing and exporting `foreign' data}\label{chap:measurement}

\section{Introduction}

The tasks described in this chapter concern the exchange of spectral information with other pieces of software. Most of the reading and writing operations described here are lossy or may require some help from the user to maintain data validity. For saving and restoring R objects of any class one should use R's built-in functions which ensure that the objects read-in (or restored) will be fully equivalent to the saved ones.

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(readr)
library(readxl)
library(photobiology)
library(photobiologyWavebands)
library(photobiologyInOut)
library(ggspectra)
#library(ooacquire}
#library(Yoctopuce}
library(lubridate)
@

\section{Reading and writing common file formats}

\subsection{Task: Read and write spectra from text files}

To\index{text files} read text files containing spectral data we use either base R's functions (\code{read.table}, \code{read.csv}, \code{read.csv2}) or preferably the corresponding functions from \pkg{readr} (\code{read\_table}, \code{read\_csv}, \code{read\_csv2}, \code{read\_tsv}, \code{read\_delim}, \code{read\_fwf}). These functions return data frame and tibble objects, respectively, that can be converted into spectral objects as described in chapter \ref{chap:data:exchange}.

To write a spectrum to a text file we can use base R's functions or from package \pkg{readr} for \emph{writing} data frames to text files. Once more, the functions in package \pkg{readr} (\code{write\_csv}, \code{write\_excel\_csv}, \code{write\_tsv}, \code{write\_delim}) are to be preferred.

\begin{framed}
  \ilAttention Writing spectral objects to text files does not preserve the metadata stored in attributes. It is lossy operation! To save to disk R objects in a way that they can be restored unchanged into the same or another \emph{workspace} use R's function \code{save}. Such objects can be read without loss of information across different versions of R, and across different operating systems.
\end{framed}

\subsection{Task: Read a spectrum from an Excel workbook}\label{sec:excel:import}

Over\index{Excel workbook}\index{Excel worksheet} the years different packages have become available for importing data from worksheets and workbooks. It has also been popular to export the worksheets as CSV (comma separated values) text files and then read these text files into R. The problem with the use of .CSV files is that the column separators and decimal markers depend on the locale in use when saved. Currently the best package for importing data from Excel workbooks (saved from recent versions of Excel), providing two functions with the easiest to use interface is \pkg{readxl}. Although we provide some functions for importing data from specific instruments and programs, there are many instruments and software that produce worksheets or workbooks. There also many users who do the initial data processing in Excel. We give here an example using data acquired with our own Ocean Optics spectrometer and stored in an \pkg{Excel} workbook (Fig.\ \ref{fig:lasse:excel}).

\begin{figure}
  \centering
  \includegraphics[width=0.9\linewidth]{figures/lasse-excel}
  \caption[Excel worksheet with spectral data]{Screen capture showing the top of the \pkg{Excel} worksheet containing data for the solar spectrum used in the example in section \ref{sec:excel:import}.}\label{fig:lasse:excel}
\end{figure}

We skip 17 rows containing other data, and we select the worksheet named `front'.

<<lasse-1>>=
my.wbk.file <- "inout/spectrum-ylianttila.xlsx"
excel_sheets(my.wbk.file)
my.df <- read_excel(my.wbk.file, sheet = "front", skip = 17)
head(my.df)
@

Or selecting columns on the fly and then creating a \code{source\_spct} object from this solar spectrum measured at ground level. As we do not really need the raw data, select all rows from columns 7 and 8. As Excel worksheets are read past the end of the data, we need to remove, the missing or NA (not available) values. We construct a \code{source\_spct} object, but we multiply the spectral irradiance data by $10^4$ to convert the units from \wattcmnm to \wattnm. Next we `clip' the wavelengths outside the calibration range keeping data for the range 290--800~nm.

<<lasse-2>>=
my.df <- read_excel(my.wbk.file, sheet = "front", skip = 17)[ , 7:8]
my.spct <- na.omit(my.spct)
my.spct <- source_spct(w.length = my.df[[1]], s.e.irrad = my.df[[2]] * 1e4)
my.spct <- clip_wl(my.spct, range = c(290,800))
@

Finally we plot the spectrum.

<<lasse-3, warning=my.debug>>=
plot(my.spct)
@

\section{Reading instrument-output files}
%%%%
\subsection{Task: Import data from Ocean Optics instruments and software}\label{sec:OO:import}

\subsubsection{SpectraSuite}

Reading\index{foreign data!Ocean Optics spectrometers} spectral (energy) irradiance from a file saved in Ocean Optics SpectraSuite software (Fig.\ \ref{fig:oo:ssirrad}, now superseded by OceanView.

\begin{figure}
  \begin{framed}
  \begin{footnotesize}
    \begin{verbatim}
    SpectraSuite Data File
++++++++++++++++++++++++++++++++++++
Date: Mon May 06 15:13:40 CEST 2013
User: User
Dark Spectrum Present: Yes
Reference Spectrum Present: No
Number of Sampled Component Spectra: 1
Spectrometers: QEB1523
Integration Time (usec): 100000 (QEB1523)
Spectra Averaged: 1 (QEB1523)
Boxcar Smoothing: 0 (QEB1523)
Correct for Electrical Dark: No (QEB1523)
Strobe/Lamp Enabled: No (QEB1523)
Correct for Detector Non-linearity: No (QEB1523)
Correct for Stray Light: Yes (QEB1523)
Number of Pixels in Processed Spectrum: 1044
>>>>>Begin Processed Spectral Data<<<<<
199.08	0.0000E00
199.89	0.0000E00
200.70	0.0000E00
201.50	1.3742E02
202.31	1.2488E02
.........
    \end{verbatim}
    \end{footnotesize}
  \end{framed}
  \caption[Top of text file \code{spectrum.SSirrad}]{Top of text file \code{spectrum.SSirrad} written by Ocean Optics' \pkg{SpectraView} software, and used in the example in section \ref{sec:OO:import}}\label{fig:oo:ssirrad}
\end{figure}


<<oo-io-01>>=
ooss.spct <- read_oo_ssirrad("inout/spectrum.SSIrrad")
ooss.spct
@

The function accepts several optional arguments. Although the function by default attempts to
read all information from the files, values like the date can be overridden and a geocode
can be set.

<<oo-io-02>>=
ooss1.spct <- read_oo_ssirrad("inout/spectrum.SSIrrad",
                            date = now())
ooss1.spct
@

\subsubsection{Jazz}

Files saved by Ocean Optics \emph{Jaz} spectrometers have a slightly different format (Fig.\ \ref{fig:oo:jazirrad}, and a function different function is to be used.

\begin{figure}
  \begin{framed}
  \begin{footnotesize}
    \begin{verbatim}
Jaz Absolute Irradiance File
++++++++++++++++++++++++++++++++++++
Date: Tue Feb 03 09:44:41 2015
User: jaz
Dark Spectrum Present: Yes
Processed Spectrum Present: Yes
Spectrometers: JAZA1065
Integration Time (usec): 193000 (JAZA1065)
Spectra Averaged: 3 (JAZA1065)
Boxcar Smoothing: 5 (JAZA1065)
Correct for Electrical Dark: Yes (JAZA1065)
Strobe/Lamp Enabled: No (JAZA1065)
Correct for Detector Non-linearity: Yes (JAZA1065)
Correct for Stray Light: No (JAZA1065)
Number of Pixels in Processed Spectrum: 2048
Fiber (micron): 3900
Collection Area: 0.119459
Int. Sphere: No
>>>>>Begin Processed Spectral Data<<<<<
W	D	S	P
188.825226	0.000000	    0.000000	    0.000000
189.284851	0.000000	    0.000000	    0.000000
189.744415	-89.659378	-90.917900	-0.000000
190.203964	-106.165916	-96.419785	0.000000
.........
    \end{verbatim}
    \end{footnotesize}
  \end{framed}
  \caption[Top of text file \code{spectrum.JazIrrad}]{Top of text file \code{spectrum.JazIrrad} written by Ocean Optics' Jaz spectrometer, and used in the example in section \ref{sec:OO:import}}\label{fig:oo:jazirrad}
\end{figure}

<<oojz-io-01>>=
jaz.spct <- read_oo_jazirrad("inout/spectrum.JazIrrad")
jaz.spct
@

Function \code{read\_oojaz\_file} accepts the same arguments as function \code{read\_ooss\_file}.

<<oojz-io-02>>=
jaz1.spct <- read_oo_jazirrad("inout/spectrum.JazIrrad",
                            date = now())
jaz1.spct
@

\subsection{Task: Import data from Avantes instruments and software}\label{sec:Ava:import}

\index{foreign data!Avantes spectrometers}
<<avaspec>>=
avantes.spct <- read_avaspec_csv("inout/spectrum-avaspec.csv",
                               date = now())
avantes.spct
@

\subsection{Task: Import data from Macam instruments and software}\label{sec:Macam:import}

\index{foreign data!Macam spectrometers}
The Macam PC-1900 spectroradiometer and its companion software save data in a simple text
file. Data is always stored as spectral (energy) irradiance, so spectral data can be easily decoded. All the files we have tested had the name tag ``.DTA''. In Figure \ref{fig:macam:dta} the top of a file output by the Macam software is shown.

\begin{figure}
  \begin{framed}
  \begin{footnotesize}
    \begin{verbatim}
@19/5/1997
@17:44:58
#No Title
 2.5000000000E+02
 0.0000000000E+00
 2.5100000000E+02
 0.0000000000E+00
 2.5200000000E+02
 0.0000000000E+00
 2.5300000000E+02
 0.0000000000E+00
.........
    \end{verbatim}
    \end{footnotesize}
  \end{framed}
  \caption[Top of text file \code{spectrum.DTA}]{Top of text file \code{spectrum.DTA} written by the software of a Macam scanning spectrometer, and used in the example in section \ref{sec:Macam:import}. In this case wavelengths and spectral irradiance are `interlaced' in a single column of numbers and metadata is minimal.}\label{fig:macam:dta}
\end{figure}


<<macam-io-01>>=
macam.spct <- read_macam_dta("inout/spectrum.DTA")
macam.spct
@

Function \code{read\_macam\_dta} accepts the same arguments as function \code{read\_ooss\_file}.

<<macam-io-02>>=
macam1.spct <- read_macam_dta("inout/spectrum.DTA",
                            date = now())
macam1.spct
@


\subsection{Task: Import data from LI-COR instruments and software}\label{sec:LI:import}

\index{foreign data!LI-COR spectrometers}
The LI-COR LI-1800 spectroradiometer and its companion software can save data either as
spectral photon irradiance or spectral (energy) irradiance. As files are labelled accordingly,
our function, automatically detects the type of data being read. Be aware that the function
is not able to decode the binary files ``.DAT''. Only ``.PRN'' as converted by LI-COR's
PC1800 software can be decoded by our function. In Figure \ref{fig:licor:prn} the top of a file output by the Macam software is shown.

\begin{figure}
  \begin{framed}
  \begin{footnotesize}
    \begin{verbatim}
"FILE:FL2"
"REM: TLD 36W/865       (QNTM)"
"LIMS: 300- 900NM"
"INT:  1NM"
"DATE:08/23 16:32"
"MIN:  300NM  1.518E-04"
"MAX:  546NM  7.491E-01"
 300  1.518E-04
 301  3.355E-04
 302  2.197E-04
 303  3.240E-04
.........
    \end{verbatim}
    \end{footnotesize}
  \end{framed}
  \caption[Top of text file \code{spectrum.PRN}]{Top of text file \code{spectrum.PRN} written by the software of a LI-COR LI-1800 scanning spectrometer, and used in the example in section \ref{sec:LI:import}. One limitation is that the year is missing from the date.}\label{fig:licor:prn}
\end{figure}

<<li-io-01>>=
licor.spct <- read_licor_prn("inout/spectrum.PRN")
licor.spct
@

Function \code{read\_licor\_file} accepts the same arguments as function \code{read\_ooss\_file}.

<<li-io-02>>=
licor1.spct <- read_licor_prn("inout/spectrum.PRN",
                               date = now())
licor1.spct
@

\subsection{Task: Import data from Bentham instruments and software}\label{sec:Ben:import}

\index{foreign data!Bentham spectrometers}

\section{Acquiring data directly from within R}

In this section, the code is not run when compiling the text, as then producing a PDF would
require instruments to be available.

\subsection{Task: Acquiring data from Ocean Optics instruments and software}\label{sec:OO:ctrl}

For\index{data acquisition!Ocean Optics spectrometers} the examples in this section to work, you will need to have Java and the \pkg{OmniDriver} runtime installed.
In addition examples as shown assume that an Ocean Optics spectrometer is connected. The output
will depend on the model(s) and configuration(s) of the instrument(s) connected. The plural is correct,
you can acquire spectra from more than one instrument, and from instruments with more than
one channel.

Package \pkg{rOmniDriver} is just a thin wrapper on the low-level access functions supplied
by the driver.
The names for functions in package \pkg{rOmniDriver} are verbose, this is because we have respected the names used in the
driver itself, written in Java. Thus was done so that information in the driver documentation can be
found easily.

First step is to load the package \pkg{rOmniDriver} which is a low level wrapper on the driver
supplied by Ocean Optics for their instruments. The runtime is free, and is all what you need
for simple tasks as documentation is available both from Ocean Optics web site and as R help.

<<oo-acq-1, eval=FALSE>>=
library(rOmniDrive)
@

After physically connecting the spectrometer through USB, the data connection needs to be
initiated and the instrument id obtained. This function returns a `Java wrapper' object
that will be used for all later operations and needs to be saved to variable. The second
statement queries the number of spectrometers, or spectrometer modules in the case of the
\emph{Jaz}.

<<oo-acq-2, eval=FALSE>>=
srs <- init_srs()
num_srs <- number_srs()
@

Indexing starts at zero, contrary to R's way, so the first spectrometer has index `0', the
second index `1', etc.

We will now assume that only one spectrometer is attached to the computer, and just rely on the
default index value of 0, which always points to the first available spectrometer. The next step,
unless we always use the same instrument is to query for a description of the optical bench of
the attached instrument.

<<oo-acq-3, eval=FALSE>>=
get_name(srs)
get_serial_number(srs)
get_bench(srs)
@

If you are writing a script that should work with different instruments, you may need to
query whether a certain function is available or not in the attached instrument. On the
other functions like those used for setting the integration time can be just assumed to
be always available. Many functions come in pairs of \code{set} and \code{get}. The only
thing to be careful with is that in some cases, the \code{set} functions can be silently
ignored. For this reason, scripts have to written so that these functions are not assumed
to always work. The most important case, setting the integration time, be be easily dealt
with in to different ways: 1) being careful the set function is passed as argument an
off-range time value, or even more reliably, 2) always using the corresponding get
function after each call to set, to obtain the value actually stored in the memory of
the spectrometer. Not following these steps can result in errors of any size, and render
the data useless.

<<oo-acq-4, eval=FALSE>>=
set_integration_time(srs, time.usec = 100)
get_integration_time(srs)
@

We can similarly set the number of scans to average.

<<oo-acq-5, eval=FALSE>>=
set_scans_to_avg(srs, 5)
get_scans_to_avg(srs)
@

To obtain data we use function \code{get\_spectrum}

<<oo-acq-6, eval=FALSE>>=
counts <- get_spectrum(srs)
@

<<oo-acq-7, eval=FALSE>>=
srs_close(srs)
@

More advanced tasks like downloading calibration data from a spectrometer are not
yet implemented, but will be added soon.

\subsection{Task: Acquiring data from sglux instruments and software}\label{sec:}

\index{foreign data!sglux spectrometers}



\subsection{Task: Acquiring data from YoctoPuce modules and servers}\label{sec:}

\index{foreign data!YoctoPuce modules}


