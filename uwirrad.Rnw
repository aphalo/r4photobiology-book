<<eval=eval_diag, include=eval_diag, echo=eval_diag, cache=FALSE>>=
opts_knit$get()
search()
getwd()
@

<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Unweighted irradiance}\label{chap:uw:irrad}

\begin{abstract}
  In this chapter we explain how to calculate unweighted energy and photon irradiances from spectral irradiance.
\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<>>=
library(photobiology)
library(photobiologyWavebands)
@

%%%%
\section{Introduction}\label{sec:uw:intro}



%%%%
\section{Task: (energy) irradiance from spectral irradiance}\label{sec:uw:e2e}

The task to be completed is to calculate the (energy) irradiance ($\irr$) in \watt from spectral (energy) irradiance ($\sirr$) in \wattnm and the corresponding wavelengths ($\lambda$) in nm.

\begin{equation}
\irr[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \sirr\ \mathrm{d}\ \lambda
\label{eq:energy:irrad}
\end{equation}

Let's assume that we want to calculate photosynthetically active radiation (PAR) energy irradiance, for which the most accepted limits are $\lambda_1 = 400 \mathrm{nm}$ and 
$\lambda_1 = 700 \mathrm{nm}$. In this example we will use example data for sunlight to calculate $\irr[400\,\mathrm{nm} < \lambda < 700\,\mathrm{nm}]$. The functions available for this task when working with spectral objects are \code{e\_irrad} and \code{q\_irrad}, returning energy- and photon irradiance, respectively. The "names" of the returned valued is set according to the waveband used.

<<>>=
e_irrad(sun.spct, waveband(c(400,700)))
@

or using the built-in \code{PAR} waveband constructor, predefined in package \PBWB as a convenience function,

<<>>=
e_irrad(sun.spct, PAR())
@

or if no waveband is supplied as argument, then irradiance is computed for the whole range of wavelengths in the spectral data, and the `name' attribute is generated accordingly.

<<>>=
e_irrad(sun.spct)
@

Both \code{e\_irrad} and \code{q\_irrad} accept, in addition to a waveband as second argument, a list of wavebands. In this case, the returned value is a numeric vector of the same length as the list.

<<>>=
e_irrad(sun.spct, list(UVB(), UVA()))
@

If you are not using spectral objects, then function \code{energy\_irradiance}, which accepts the spectral data as vectors, can be used instead, at the cost of less concise code.

<<tidy=FALSE>>=
with(sun.data,
     energy_irradiance(w.length, s.e.irrad,
                       new_waveband(400, 700)))
@

Using function \code{PAR()}, the code above becomes:

<<>>=
with(sun.data,
     energy_irradiance(w.length, s.e.irrad, PAR()))
@

If no waveband is supplied as argument, then the whole range of wavelengths in the spectral data is used for the integration, and the `name' attribute is generated accordingly:
<<tidy=FALSE>>=
with(sun.data,
     energy_irradiance(w.length, s.e.irrad))
@

If a waveband that does not fully overlap with the data is supplied as argument, then spectral irradiance for wavelengths outside the range is assumed to be zero:
<<tidy=FALSE>>=
with(sun.data,
     energy_irradiance(w.length, s.e.irrad,
                       new_waveband(700,1000)))
@

If a waveband that does not overlap with the data is supplied as argument, then spectral irradiance for wavelengths outside the range is assumed to be zero:
<<tidy=FALSE>>=
with(sun.data,
     energy_irradiance(w.length, s.e.irrad,
                       new_waveband(100,200)))
@

%%%%
\section{Task: photon irradiance from spectral irradiance}\label{sec:uw:e2q}

The task to be completed is to calculate the photon irradiance ($\pfd$) in \mol from spectral (energy) irradiance ($\sirr$) in \wattnm and the corresponding wavelengths ($\lambda$) in nm.

Combining equations \ref{eq:energy:irrad} and \ref{eq:energy:mol:photons} we obtain:

\begin{equation}
\pfd[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \sirr\ \frac{h' \cdot c}{\lambda} \mathrm{d}\ \lambda
\end{equation}

Let's assume that we want to calculate photosynthetically active radiation (PAR) photon irradiance. In this example we will use example data for sunlight.

<<tidy=FALSE>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, PAR()))
@

If we want to have $\pfd[\PAR]$ (\PPFD) expressed in the usual units of \umol, we need to multiply the result above by $10^6$:

<<tidy=FALSE>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, PAR())) * 1e6
@

\code{PAR()} is predefined in package \PBWB as a convenience function, see section \ref{sec:energy:irrad} for an example with arbitrary values for $\lambda_1$ and $\lambda_2$.

%%%%
\section[Task: irradiance from spectral photon irradiance]{Task: calculate energy and photon irradiances from spectral photon irradiance}\label{sec:uw:irrad:q2e}

In the case of the calculation of energy irradiance from spectral photon irradiance the calculation is:
\begin{equation}
\irr[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \spfd\ \frac{\lambda}{h' \cdot c} \mathrm{d}\ \lambda
\end{equation}

And the code\footnote{The dataframe \code{sun.data} contains both spectral energy irradiance vales in `column' \code{s.e.irrad} and spectral photon irradiance in `column' \code{s.q.irrad}}:

<<>>=
with(sun.data,
     energy_irradiance(w.length, s.q.irrad,
                       PAR()), unit.in="photon")
@

The calculation of photon irradiance from spectral photon irradiance, is a simple integration, analogous to that in equation \ref{eq:energy:irrad}, and the code is:

<<>>=
with(sun.data,
     photon_irradiance(w.length, s.q.irrad,
                       PAR()), unit.in="photon")
@

%%%%
\section{Task: irradiances for more than one waveband}\label{sec:uw:mult:wb}

It is possible to calculate the irradiances for several wavebands with a single function call by supplying a \code{list} of \code{wavebands} as argument:
<<>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad,
                       list(Red(), Green(), Blue()))) * 1e6
Q.RGB <- with(sun.data,
     photon_irradiance(w.length, s.e.irrad,
                       list(Red(), Green(), Blue()))) * 1e6
signif(Q.RGB, 3)
Q.RGB[1]
Q.RGB["Green.ISO"]
@

A named list can be used to override the use as names for the output of the waveband names:
<<>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad,
                       list(R=Red(), G=Green(), B=Blue()))) * 1e6
@

Even when using a single waveband:
<<tidy=FALSE>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad,
                       list(UVB=UVB()))) * 1e6
@

%%%%
\section{Task: use simple wavebands}\label{sec:wavebands}

Please, consult the packages' documentation for a list of predefined functions for creating wavebands. Here we will present just a few examples of their use. We usually associate wavebands with colours, however, in many cases there are different definitions in use. For this reason, the functions provided accept an argument that can be used to select the definition to use. In general, the default, is to use the ISO standard whenever it is applicable. The case of the various definitions in use for the \UVB waveband are described on page \pageref{pag:UVB:stds}

We can use a predefined function to create a new \code{waveband} object, which as any other R object can be assigned to a variable:

<<>>=
uvb <- UVB()
uvb
@

As seen above, there is a specialized \code{print} function for \code{wavebands}. Functions available are \code{min}, \code{max}, \code{range}, \code{center\_wl}, \code{labels}, and \code{color}.

<<>>=
red <- Red()
red
min(red)
max(red)
range(red)
midpoint(red)
labels(red)
color(red)
@

Here we demonstrate the use of an argument to choose a certain definition:\label{pag:UVB:stds}

<<>>=
UVB()
UVB("ISO")
UVB("CIE")
UVB("medical")
UVB("none")
@

Here we demonstrate the importance of complying with standards, and how much the photon irradiance calculated can depend on the definition used.

<<tidy=FALSE>>=
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, UVB("ISO"))) * 1e6
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, UVB("none"))) * 1e6
@

%%%%
\section{Task: define simple wavebands}\label{sec:wavebands}

Here we briefly introduce \code{new\_waveband}, and only in chapter \ref{chap:wtirrad} we describe its use in full detail, including the use of spectral weighting functions (SWFs).

Defining a new \code{waveband} based on extreme wavelengths expressed in nm.
<<tidy=FALSE>>=
wb1 <- new_waveband(500,600)
wb1
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, wb1)) * 1e6
wb2 <- new_waveband(500,600, wb.name="my.colour")
wb2
with(sun.data,
     photon_irradiance(w.length, s.e.irrad, wb2)) * 1e6
@

%%%%
\section{Task: photon ratios}\label{sec:photon:ratio}

In photobiology sometimes we are interested in calculation the photon ratio between two wavebands. It makes more sense to calculate such ratios if both numerator and denominator wavebands have the same `width' or if the numerator waveband is fully nested in the denominator waveband. However, frequently used ratios like the \UVB to \PAR photon ratio do not comply with this. For this reason, our functions do not enforce any such restrictions.

For example a ratio frequently used in plant photobiology is the read to far-red photon ratio (R:FR photon ratio or $\zeta$). If we follow the wavelength ranges in the definition given by \cite{Morgan1981a}, using photon irradiance\footnote{In the original text photon fluence rate is used but it not clear whether photon irradiance was meant instead.}:

\begin{equation}
\zeta = \frac{\pfd[655 \mathrm{nm} < \lambda < 665  \mathrm{nm}]}{\pfd[725 \mathrm{nm} < \lambda < 735 \mathrm{nm}]}
\end{equation}

To calculate this for our example sunlight spectrum we can use the following code:

<<tidy=FALSE>>=
with(sun.data,
     photon_ratio(w.length, s.e.irrad,
                  Red("Smith"), Far_red("Smith")))
@

or using the predefined convenience function \code{R\_FR\_ratio}:

<<tidy=FALSE>>=
with(sun.data,
     R_FR_ratio(w.length, s.e.irrad))
@

Using defaults for waveband definitions:

<<tidy=FALSE>>=
with(sun.data,
     energy_ratio(w.length, s.e.irrad, UVB(), PAR()))
@

%%%%
\section{Task: energy ratios}\label{sec:energy:ratio}

An energy ratio, equivalent to $\zeta$ can be calculated as follows:

<<tidy=FALSE>>=
with(sun.data,
     energy_ratio(w.length, s.e.irrad,
                  Red("Smith"), Far_red("Smith")))
@

For this infrequently used ratio, no pre-defined function is provided.

%%%%
\section{Task: calculate average number of photons per unit energy}\label{sec:photons:energy}

When comparing photo-chemical and photo-biological responses under different light sources it is of interest to calculate the photons per energy in \moljoule. In this case only one waveband definition is used to calculate the quotient:

\begin{equation}
\bar{q'} = \frac{\pfd[\lambda_1 < \lambda < \lambda_2]}{\irr[\lambda_1 < \lambda < \lambda_2]}
\end{equation}

<<tidy=FALSE>>=
with(sun.data,
     photons_energy_ratio(w.length, s.e.irrad, PAR()))
@

For obtaining the same quotient in \umoljoule we just need to multiply by $10^6$. We can use such a multiplier to convert $\irr$ [\watt] into $\pfd$ [\umol] (as \Unit{W} = \Unit{J\,s^{-1}}), or as a divisor to convert $\pfd$ [\umol] into $\irr$ [\watt], \emph{for a given light source and waveband}:

<<>>=
with(sun.data,
     photons_energy_ratio(w.length, s.e.irrad, PAR())) * 1e6
@

%%%%
\section[Task: split energy irradiance into regions]{Task: calculate the contribution of different regions of a spectrum to energy irradiance}\label{sec:split:energy}

\sloppy
It can be of interest to split the total (energy) irradiance into adjacent regions delimited by arbitrary wavelengths. We can use the function \code{split\_energy\_irradiance} to obtain to energy of each of the regions delimited by the values in nm supplied in a numeric vector:

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700)))
@

Here we demonstrate that the sum of the four `split' irradiances add to the total for the range of wavelengths covered:

<<>>=
with(sun.data,
     sum(split_energy_irradiance(w.length, s.e.irrad,
                                 c(400, 500, 600, 700))))
with(sun.data,
     energy_irradiance(w.length, s.e.irrad, PAR()))
@

It also possible to obtain the `split' as a vector of fractions adding up to one,

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700),
                             scale="relative"))
@

or as percentages:

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700),
                             scale="percent"))
@

If the `limits' cover only a region of the spectral data, relative and percent values will be calculated with that region as a reference.

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400,500,600,700),
                             scale="percent"))
@

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400,500,600),
                             scale="percent"))
@

A vector of two wavelengths is valid input, although not very useful for percentages:

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 700),
                             scale="percent"))
@

In contrast, for \code{scale="absolute"}, the default, it can be used as a quick way of calculating an irradiance for a range of wavelengths without having to define a \code{waveband}:

<<>>=
with(sun.data,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 700)))
@

%%%%
\section[Task: split photon irradiance into regions]{Task: calculate the contribution of different regions of a spectrum to photon irradiance}\label{sec:split:photons}

The function \code{split\_photon\_irradiance} takes the same arguments as the equivalent function for photon irradiance, consequently only one code example is provided here (see section \ref{sec:split:energy} for more details):

<<>>=
with(sun.data,
     split_photon_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700),
                             scale="percent"))
@

<<>>=
try(detach(package:photobiologyWavebands))
try(detach(package:photobiology))
@
