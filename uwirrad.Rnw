<<eval=eval_diag, include=eval_diag, echo=eval_diag, cache=FALSE>>=
opts_knit$get()
search()
getwd()
@

<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Irradiance (not weighted)}\label{chap:uw:irrad}
%
%\begin{abstract}
%  In this chapter we explain how to calculate unweighted energy and photon irradiances from spectral irradiance.
%\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(lubridate)
library(photobiology)
library(photobiologyWavebands)
library(photobiologyLamps)
library(photobiologyLEDs)
library(photobiologySun)
@

%%%%
\section{Introduction}\label{sec:uw:intro}

Functions\index{irradiance}\index{irradiance!energy base}\index{irradiance!photon base} \code{e\_irrad} and \code{q\_irrad} return energy irradiance and photon (or quantum) irradiance, and both take as argument a \code{source\_spct} object containing either spectral (energy) irradiance or spectral photon irradiance data. An additional parameter accepting a \code{waveband} object, or a list of \code{waveband} objects, can be used to set the range(s) of wavelengths and spectral weighting function(s) to use for integration(s). Two additional functions, \code{energy\_irradiance} and \code{photon\_irradiance}, are defined for equivalent calculations on spectral irradiance data stored as numeric vectors.

We start by describing how to use and define \code{waveband} objects, for which we need to use function \code{e\_irrad} in some examples before a detailed explanation of its use (see section \ref{sec:uw:eirrad}) on page \pageref{sec:uw:eirrad} for details).

%%%%
\section{Task: use simple predefined wavebands}\label{sec:uwavebands:use}

Please, consult\index{wavebands!pre-defined} the packages' documentation for a list of predefined functions for creating wavebands also called \code{waveband} \emph{constructors}. Here we will present just a few examples of their use. We usually associate wavebands with colours, however, in many cases there are different definitions in use. For this reason, the functions provided accept an argument that can be used to select the definition to use. In general, the default, is to use the ISO standard whenever it is applicable. The case of the various definitions in use for the \UVB waveband are described on page \pageref{pag:UVB:stds}

We can use a predefined function to create a new \code{waveband} object, which as any other R object can be assigned to a variable:

<<>>=
uvb <- UVB()
uvb
@

As seen above, there is a specialized \code{print} method for \code{wavebands}. \code{waveband} methods returning wavelength values in nm are \code{min}, \code{max}, \code{range}, \code{midpoint}, and \code{spread}. Method \code{labels} returns the name and label stored in the waveband, and method \code{color\_of} returns a color definition calculated from the range of wavelengths.

<<>>=
red <- Red()
red
min(red)
max(red)
range(red)
midpoint(red)
spread(red)
labels(red)
color_of(red)
@

The argument \code{standard} can be used to choose a given alternative definition\footnote{When available, the definition in the ISO standard is the default.}:\label{pag:UVB:stds}

<<>>=
UVB()
UVB("ISO")
UVB("CIE")
UVB("medical")
UVB("none")
@

Here we demonstrate the importance of complying with standards, and how much photon irradiance can depend on the definition used in the calculation.

<<tidy=FALSE>>=
e_irrad(sun.spct, UVB("ISO"))
e_irrad(sun.spct, UVB("none"))
e_irrad(sun.spct, UVB("ISO")) / e_irrad(sun.spct, UVB("none"))
@

%%%%
\section{Task: define simple wavebands}\label{sec:uwavebands}

Here\index{wavebands!define new} we briefly introduce \code{waveband} and \code{new\_waveband}, and only in chapter \ref{chap:wt:irrad} we describe their use in full detail, including the use of spectral weighting functions (SWFs). The examples in the present section only describe \code{waveband}s that define a wavelength range.

A \code{waveband} can be created based on any R object for which function \code{range} is defined, and returns numbers interpretable as wavelengths expressed in nanometres:

<<>>=
waveband(c(400,700))
waveband(400:700)
waveband(sun.spct)
wb_total <- waveband(sun.spct, wb.name="total")
@

<<>>=
e_irrad(sun.spct, wb_total)
@

A \code{waveband} can also be created based on extreme wavelengths expressed in nm.
<<tidy=FALSE>>=
wb1 <- new_waveband(500,600)
wb1
e_irrad(sun.spct, wb1)
wb2 <- new_waveband(500,600, wb.name="my.colour")
wb2
e_irrad(sun.spct, wb2)
@

%%%%
\section{Task: define lists of simple wavebands}\label{sec:uwaveband:lists}

Lists\index{wavebands!list of} of wavebands can be created by grouping \code{waveband} objects using the R-defined constructor \code{list},

<<>>=
UV.list <- list(UVC(), UVB(), UVA())
UV.list
@
in which case wavebands can be non-contiguous and/or overlapping.

In addition function \code{split\_bands} can be used to create a list of contiguous wavebands by supplying a numeric vector of wavelength boundaries in nanometres,

<<>>=
split_bands(c(400,500,600))
@

or with longer but more meaningful names,

<<>>=
split_bands(c(400,500,600), short.names=FALSE)
@

It is also possible to also provide the limits of the region to be covered by the list of wavebands and the number of (equally spaced) wavebands desired:

<<>>=
split_bands(c(400,600), length.out=2)
@

in all cases \code{range} is used to find the list boundaries, so we can also split the region defined by an existing \code{waveband} object into smaller wavebands,
<<>>=
split_bands(PAR(), length.out=3)
@

or split a whole spectrum\footnote{This is not restricted to \code{source\_spct} objects as all other classes of \code{\_\_\_.spct} objects also have \code{range} methods defined.} into equally sized regions,

<<>>=
split_bands(sun.spct, length.out=3)
@

It is also possible to supply a list of wavelength ranges\footnote{When using a list argument, even overlapping and non-contiguous wavelength ranges are valid input}, and, when present, names are copied from the input list to the output list:

<<>>=
split_bands(list(c(400,500), c(600,700)))
split_bands(list(blue=c(400,500), PAR=c(400,700)))
@

Package \PBWB also predefines some useful constructors of lists of frequently used sets of wavebands, currently \code{VIS\_bands}, \code{UV\_bands}, and \code{IR\_bands} and \code{Plant\_bands}.

<<>>=
UV_bands()
@

Further list-of-waveband constructors are application specific---i.e.\ for satellite instruments like \code{Landsat\_bands}. In this example for the third Landsat mission.

<<>>=
Landsat_bands(std = "L3")
@

%%%%
\section{Task: (energy) irradiance from spectral irradiance}\label{sec:uw:eirrad}

The task to be completed is to calculate the (energy) irradiance ($\irr$) in \watt from spectral (energy) irradiance ($\sirr$) in \wattnm and the corresponding wavelengths ($\lambda$) in nm.

\begin{equation}
\irrM[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \sirr\ \mathrm{d}\lambda
\label{eq:energy:irrad}
\end{equation}

Let's assume that we want to calculate photosynthetically active radiation (PAR) energy irradiance, for which the most accepted limits are $\lambda_1 = 400 \mathrm{nm}$ and
$\lambda_1 = 700 \mathrm{nm}$. In this example we will use example data for sunlight to calculate $\irr[400\,\mathrm{nm} < \lambda < 700\,\mathrm{nm}]$. The function used for this task when working with spectral objects is \code{e\_irrad} returning energy irradiance. The "names" of the returned valued is set according to the waveband used, and \code{sun.spct} is a \code{source\_spct} object.

<<>>=
e_irrad(sun.spct, waveband(c(400,700)))
@

or using the \code{PAR} waveband constructor, defined in package \PBWB as a convenience function,

<<>>=
e_irrad(sun.spct, PAR())
@

or if no waveband is supplied as argument, then irradiance is computed for the whole range of wavelengths in the spectral data, and the `name' attribute is generated accordingly.

<<>>=
e_irrad(sun.spct)
@

If a waveband extends outside of the wavelength range of the spectral data, spectral irradiance for unavailable wavelengths is assumed to be zero:
<<tidy=FALSE>>=
e_irrad(sun.spct, waveband(c(100,400)))
e_irrad(sun.spct, waveband(c(100,250)))
@

Both \code{e\_irrad} and \code{q\_irrad} accept, in addition to a waveband as second argument, a list of wavebands. In this case, the returned value is a numeric vector of the same length as the list.

<<>>=
e_irrad(sun.spct, list(UVB(), UVA()))
@

\begin{small}

Storing emission spectral data in \code{source\_spct} objects is recommended, as it allows better protection against mistakes, and allows automatic detection of input data base of expression and units. However, it may be sometimes more convenient or efficient to keep spectral data in individual numeric vectors, or data frames. In such cases function \code{energy\_irradiance}, which accepts the spectral data as vectors can be used at the cost of less concise code and weaker error tests. In this case, the user must indicate whether spectral data is on energy or photon based units through parameter \code{unit.in}, which defaults to \code{"energy"}.

For example when using function \code{PAR()}, the code above becomes:

<<>>=
with(sun.spct,
     energy_irradiance(w.length, s.e.irrad, PAR()))
with(sun.spct,
     energy_irradiance(w.length, s.e.irrad, PAR(), unit.in="energy"))
@

where \code{sun.spct} is a data frame. However, the data can also be stored in separate numeric vectors of equal length.


The \code{sun.spct} data frame also contains spectral photon irradiance values:
<<>>=
names(sun.spct)
@
which allows us to use:

<<>>=
with(sun.spct,
     energy_irradiance(w.length, s.q.irrad, PAR(), unit.in="photon"))

@

The other examples above can be re-written with similar syntax.

\end{small}

%%%%
\section{Task: photon irradiance from spectral irradiance}\label{sec:uw:qirrad}

The task to be completed is to calculate the photon irradiance ($\pfd$) in \mol from spectral (energy) irradiance ($\sirr$) in \wattnm and the corresponding wavelengths ($\lambda$) in nm.

Combining equations \ref{eq:energy:irrad} and \ref{equ:molenergy} we obtain:

\begin{equation}
\pfdM[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \sirr\ \frac{h' \cdot c}{\lambda}\ \mathrm{d}\lambda
\end{equation}

Let's assume that we want to calculate photosynthetically active radiation (PAR) photon irradiance (frequently called PPFD or photosynthetic photon flux density), for which the most accepted limits are $\lambda_1 = 400 \mathrm{nm}$ and
$\lambda_1 = 700 \mathrm{nm}$. In this example we will use example data for sunlight to calculate $\irr[400\,\mathrm{nm} < \lambda < 700\,\mathrm{nm}]$. The function used for this task when working with spectral objects is \code{q\_irrad}, returning photon irradiance in \mol. The "names" of the returned valued is set according to the waveband used, and \code{sun.spct} is a \code{source\_spct} object.

<<>>=
q_irrad(sun.spct, waveband(c(400,700)))
@

to obtain the photon irradiance expressed in \umol we multiply the returned value by $1 \times 10^6$:
<<>>=
q_irrad(sun.spct, waveband(c(400,700))) * 1e6
@

or using the \code{PAR} waveband constructor, defined in package \PBWB as a convenience function,

<<>>=
q_irrad(sun.spct, PAR()) * 1e6
@

Examples given in section \ref{sec:uw:eirrad} can all be converted by replacing \code{e\_irrad} function calls with \code{q\_irrad} function calls.

\begin{small}

Storing emission spectral data in \code{source\_spct} objects is recommended (see section \ref{sec:uw:eirrad}). However, it may be sometimes more convenient or efficient to keep spectral data in individual numeric vectors, or data frames. In such cases function \code{photon\_irradiance}, which accepts the spectral data as vectors can be used at the cost of less concise code and weaker error tests. In this case, the user must indicate whether spectral data is on energy or photon based units through parameter \code{unit.in}, which defaults to \code{"energy"}.

For example when using function \code{PAR()}, the code above becomes:

<<>>=
with(sun.spct,
     photon_irradiance(w.length, s.e.irrad, PAR()), unit.in="energy")  * 1e6
with(sun.spct,
     photon_irradiance(w.length, s.e.irrad, PAR()))  * 1e6
@

where \code{sun.spct} is a data frame. However, the data can also be stored in separate numeric vectors of equal length.

\end{small}

\section{Task: irradiance for more than one waveband}\label{sec:uw:mult:wb}

As discussed above, it is possible to calculate simultaneously the irradiance for several wavebands with a single function call by supplying a \code{list} of \code{wavebands} as argument:

<<>>=
q_irrad(sun.spct, list(Red(), Green(), Blue())) * 1e6
Q.RGB <- q_irrad(sun.spct, list(Red(), Green(), Blue())) * 1e6
signif(Q.RGB, 3)
Q.RGB[1]
Q.RGB["Green.ISO"]
@
as the value returned is in \mol we multiply it by $1 \times 10^6$ to obtain \umol.

A named list can be used to override the names used for the output:
<<>>=
q_irrad(sun.spct, list(R=Red(), G=Green(), B=Blue())) * 1e6
@

Even when using a single waveband:
<<tidy=FALSE>>=
q_irrad(sun.spct, list('ultraviolet-B'=UVB())) * 1e6
@

\begin{small}
The examples above, can be easily rewritten using functions \code{e\_irrad}, \code{energy\_irradiance} or \code{photon\_irradiance}.

For example, the second example above becomes:
<<>>=
e_irrad(sun.spct, list(R=Red(), G=Green(), B=Blue()))
@

or

<<>>=
with(sun.spct,
     energy_irradiance(w.length, s.e.irrad,
                       list(R=Red(), G=Green(), B=Blue())))
@

\end{small}

\section{Task: calculate fluence for an irradiation event}\label{sec:wt:fluence}

The task to be completed is to calculate the (energy) fluence ($\fluence$) in \joule from spectral (energy) irradiance ($\sirr$) in \wattnm and the corresponding wavelengths ($\lambda$) in nm.

\begin{equation}
\fluenceM[\lambda_1 < \lambda < \lambda_2] = \int_{\lambda_1}^{\lambda_2} \sirr \times t\ \mathrm{d}\lambda
\label{eq:energy:fluence}
\end{equation}

\authorNote{Needs to be edited for fluence!}
Let's assume that we want to calculate photosynthetically active radiation (PAR) energy fluence, for which the most accepted limits are $\lambda_1 = 400 \mathrm{nm}$ and
$\lambda_1 = 700 \mathrm{nm}$. In this example we will use example data for sunlight to calculate $\fluence[400\,\mathrm{nm} < \lambda < 700\,\mathrm{nm}]$. The function used for this task when working with spectral objects is \code{e\_fluence} returning energy irradiance. The "names" of the returned valued is set according to the waveband used, and \code{sun.spct} is a \code{source\_spct} object.
The use of function \code{fluence} facilitates the calculation as it accepts the length of time of the exposure as a \code{lubridate::duration}, making it easy to enter the duration using different units, or even calculate the duration as the difference between two times. Of course, the spectral irradiance should be measured at the position where the material being exposed was located during irradiation. The following example is for a red fluorescent tube as sometimes used in seed germination experiments to study phytochrome-mediated responses.

Here we calculate the red light fluence corresponding to 5 min exposure to sunlight at the time the example spectral data was measured.

<<>>=
fluence(sun.spct,
        exposure.time = duration(5, "minutes"))
@

\Attention{example spectral irradiance data}\index{scaling normalized data} While the example spectral data for sunlight are expressed in absolute units, example spectral data for lamps in packages \pkg{photobiologyLamps} and \pkg{photobiologyLEDs} are normalized. To be able to calculate irradiance or fluence from these spectra they need first to the scaled. Scaling can be based on a different waveband. An example follows.

We assume that PAR photon irradiance is known for the experimental conditions, and is equal to 20 \umol. From this value and the normalized spectrum we can reconstruct actual spectral irradiance for the experiment.

<<>>=
red_lamp.spct <- fscale(lamps.mspct$philips.tld36w.15,
                        f = q_irrad,
                        w.band = PAR(),
                        target = 20e-6)
setScaled(red_lamp.spct, FALSE) # to avoid warnings
@

In the example above we used a waveband object defining a range of wavelengths, however, a waveband object describing a BSWF could also have been used in its place.

<<>>=
fluence(red_lamp.spct, w.band = list(Red("Smith10"), Red("Smith20"), Red("ISO")),
        exposure.time = duration(5, "minutes"))
@

Above we calculate fluences for three different definitions of ``red light'' for the same experimental condition. Clearly, they are different.

Please see the sections \ref{sec:wt:exposure} for additional details.
%%%%
\section{Task: photon ratios}\label{sec:photon:ratio}

In\index{ratios!photon base} photobiology sometimes we are interested in calculation the photon ratio between two wavebands. It makes more sense to calculate such ratios if both numerator and denominator wavebands have the same `width' or if the numerator waveband is fully nested in the denominator waveband. However, frequently used ratios like the \UVB to \PAR photon ratio do not comply with this. For this reason, our functions do not enforce any such restrictions.

For example a ratio frequently used in plant photobiology is the red to far-red photon ratio (R:FR photon ratio or $\zeta$). If we follow the wavelength ranges in the definition given by \citeauthor{Morgan1981a} \autocite*{Morgan1981a}, using photon irradiance\footnote{In the original text photon fluence rate is used but it not clear whether photon irradiance was meant instead.}:

\begin{equation}
\zeta = \frac{\pfdM[655 \mathrm{nm} < \lambda < 665  \mathrm{nm}]}{\pfdM[725 \mathrm{nm} < \lambda < 735 \mathrm{nm}]}
\end{equation}

To calculate this for our example sunlight spectrum we can use the following code:

<<>>=
q_ratio(sun.spct, Red("Smith10"), Far_red("Smith10"))
@

In the case of ratios whether spectral irradiance has been normalized or linearly scaled, or not, does not affect the result.

<<>>=
q_ratio(lamps.mspct$philips.tld36w.15, Red("Smith10"), Far_red("Smith10"))
q_ratio(red_lamp.spct, Red("Smith10"), Far_red("Smith10"))
@

Function \code{q\_ratio} also accepts lists of wavebands, for both denominator and numerator arguments, and recycling takes place when needed.
Calculation of the contribution of different colors to visible light, using ISO-standard definitions.

<<>>=
q_ratio(sun.spct, UVB(), list(UV(), VIS()))
@

<<>>=
q_ratio(sun.spct,
         list(Red(), Green(), Blue()), VIS())
@

or using a predefined list of wavebands:

<<>>=
q_ratio(sun.spct, VIS_bands(), VIS())
@

\begin{small}
Using spectral data stored in numeric vectors:

<<tidy=FALSE>>=
with(sun.spct,
     photon_ratio(w.length, s.e.irrad,  Red("Smith10"), Far_red("Smith10")))
@

\end{small}

%%%%
\section{Task: energy ratios}\label{sec:energy:ratio}

An\index{ratios!energy base} energy ratio, equivalent to $\zeta$ can be calculated as follows:

<<>>=
e_ratio(sun.spct, Red("Smith10"), Far_red("Smith10"))
@

other examples in section \ref{sec:photon:ratio} above, can be easily edited to use \code{e\_ratio} instead of \code{q\_ratio}.


\begin{small}

Using spectral data stored in vectors:

<<tidy=FALSE>>=
with(sun.spct,
     energy_ratio(w.length, s.e.irrad,
                  Red("Smith10"), Far_red("Smith10")))
@

For this infrequently used ratio, no pre-defined function is provided.
\end{small}

%%%%
\section{Task: calculate average number of photons per unit energy}\label{sec:photons:energy}

When\index{ratios!photon:energy}\index{ratios!energy:photon} comparing photo-chemical and photo-biological responses under different light sources it is of interest to calculate the photons per energy in \moljoule. In this case only one waveband definition is used to calculate the quotient:

\begin{equation}
\bar{q'} = \frac{\pfdM[\lambda_1 < \lambda < \lambda_2]}{\irrM[\lambda_1 < \lambda < \lambda_2]}
\end{equation}

From this equation it follows that the value of the ratio will depend on the shape of the emission spectrum of the radiation source.
For example, for PAR the R code is:

<<>>=
qe_ratio(sun.spct, PAR())
@

for obtaining the same quotient in \umoljoule we just need to multiply by $1 \times 10^6$,

<<>>=
qe_ratio(sun.spct, PAR()) * 1e6
@

The seldom needed inverse ratio in \joulemol can be calculated with function \code{eq\_ratio}.

Both functions accept lists of wavebands, so several ratios can be calculated with a single function call:

<<>>=
qe_ratio(sun.spct, VIS_bands())
@

\begin{small}
The same ratios can be calculated for data stored in numeric vectors using function \code{photons\_energy\_ratio}:

<<tidy=FALSE>>=
with(sun.spct,
     photons_energy_ratio(w.length, s.e.irrad, PAR()))
@

For obtaining the same quotient in \umoljoule from spectral data in \wattnm we just need to multiply by $1 \times 10^6$:

<<>>=
with(sun.spct,
     photons_energy_ratio(w.length, s.e.irrad, PAR())) * 1e6
@

\end{small}

%%%%
\section[Task: split energy irradiance into regions]{Task: calculate the contribution of different regions of a spectrum to energy irradiance}\label{sec:split:energy}

\sloppy
It\index{wavebands!create new by splitting} can be of interest to split the total (energy) irradiance into adjacent regions delimited by arbitrary wavelengths.
When working with \code{source\_spct} objects, the best way to achieve this is to combine the use of the functions \code{e\_irrad} and \code{split\_bands} already described above, for example,

<<>>=
e_irrad(sun.spct, split_bands(c(400, 500, 600, 700)))
@

or

<<>>=
e_irrad(sun.spct, split_bands(PAR(), length.out=3))
@

or

<<>>=
my_bands <- split_bands(PAR(), length.out=3)
e_irrad(sun.spct, my_bands)
@

For the example immediately above, we can calculate relative values as

<<>>=
e_irrad(sun.spct, my_bands) / e_irrad(sun.spct, PAR())
@

or more efficiently as

<<>>=
irradiances <- e_irrad(sun.spct, my_bands)
irradiances / sum(irradiances)
@

The examples above use short names, the default, but longer names are also available,

<<>>=
e_irrad(sun.spct, split_bands(c(400, 500, 600, 700), short.names=FALSE))
e_irrad(sun.spct, split_bands(PAR(), short.names=FALSE, length.out=3))
@

With spectral data stored in numeric vectors, we can use function \code{energy\_irradiance} together with function \code{split\_bands} or we can use the convenience function \code{split\_energy\_irradiance} to obtain to energy of each of the regions delimited by the values in nm supplied in a numeric vector:

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700)))
@

It possible to obtain the `split' as a vector of fractions adding up to one,

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700),
                             scale="relative"))
@

or as percentages:

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 500, 600, 700),
                             scale="percent"))
@

If the `limits' cover only a region of the spectral data, relative and percent values will be calculated with that region as a reference.

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400,500,600,700),
                             scale="percent"))
@

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400,500,600),
                             scale="percent"))
@

A vector of two wavelengths is valid input, although not very useful for percentages:

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 700),
                             scale="percent"))
@

In contrast, for \code{scale="absolute"}, the default, it can be used as a quick way of calculating an irradiance for a range of wavelengths without having to define a \code{waveband}:

<<>>=
with(sun.spct,
     split_energy_irradiance(w.length, s.e.irrad,
                             c(400, 700)))
@

\section[Task: calculate overlap between spectra]{Task: calculate the spectral overlap between two light sources}\label{sec:split:energy}

The first case assumes that we use the same photon irradiance for both sources, in this case two different types of LEDs.

The first step is to scale both spectra so that the photon irradiance is the same, in this case equal to one.

<<>>=
green.spct <- fscale(leds.mspct$NHXRGB090_G,
                     range = c(400, 700),
                     f = "total",
                     unit.out = "photon")
blue.spct <- fscale(leds.mspct$NHXRGB090_B,
                    range = c(400, 700),
                    f = "total",
                    unit.out = "photon")

overlapBG.s.q.irrad <- ifelse(green.spct$s.q.irrad < blue.spct$s.q.irrad,
                              green.spct$s.q.irrad,
                              blue.spct$s.q.irrad)

overlapBG.spct <- source_spct(w.length = blue.spct$w.length,
                              s.q.irrad = overlapBG.s.q.irrad)

integrate_spct(overlapBG.spct) /
    (integrate_spct(green.spct) + integrate_spct(blue.spct)) * 1e2
@

\section{Collections of spectra}

The methods described above are also implemented for collections of spectra. When applied to a \code{source\_mspct} object they return a data-frame compatible \code{tibble} containing the summaries. We use as example a time series of spectral irradiance measurements in a forest gap.

<<>>=
q_irrad(gap.mspct, VIS_bands())
@

<<>>=
q_ratio(gap.mspct, VIS_bands(), VIS())
@

We can also selectively copy metadata from the individual spectra in the collection to the returned data frame.

<<>>=
q_ratios.tb <- q_ratio(leds.mspct[led_engin], VIS_bands(), VIS(), 
                       attr2tb = "what.measured",
                       idx = "type")
names(q_ratios.tb)
cat(q_ratios.tb$what.measured, sep = "\n\n")
q_ratios.tb
@


<<>>=
try(detach(package:photobiologySun))
try(detach(package:photobiologyLamps))
try(detach(package:photobiologyLEDs))
try(detach(package:photobiologyWavebands))
try(detach(package:photobiology))
try(detach(package:lubridate))
@

