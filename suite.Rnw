\chapter{Photobiology R packages}

\begin{abstract}
  In this chapter we describe the suite of R packages for photobiological calculations `\textsf{r4photobiology}', and explain how to install them.
\end{abstract}

%%%%
\section{The suite}

The suite consists in several packages. The main package is \code{photobiology} which contains all the generally useful functions, including many used in the other, more specialized, packages (Table \ref{tab:suite}).

\begin{table}
\newcommand{\gblt}{\textcolor{green}{$\bullet$}}
\newcommand{\yblt}{\textcolor{yellow}{$\bullet$}}
\newcommand{\rblt}{\textcolor{red}{$\bullet$}}
\caption[Packages in the suite]{Packages in the \textsf{r4photobiology} suite. Packages not yet released are
highlighted with a red bullet \rblt, and those at `beta' stage with a yellow bullet \yblt, those relatively stable with a
green bullet \gblt.}\label{tab:suite}
\begin{small}
\begin{tabular}{c>{\ttshape}lll}
\toprule
 & Package           &  Type        & Contents \\
\midrule
\gblt & photobiology      &  functions   & basic functions and example data \\
\midrule
\gblt & photobiologyVIS   &  definitions & quantification of VIS radiation \\
\gblt & photobiologyUV    &  definitions & quantification of UV radiation \\
\midrule
\gblt & photobiologySun   &  data        & spectral data for solar radiation \\
\gblt & photobiologyLamps &  data        & spectral data for lamps \\
\gblt & photobiologyLEDs  &  data        & spectral data for LEDs \\
\yblt & photobiologyFilters  &  data     & transmittance data for filters \\
\yblt & photobiologySensors  &  data     & response data for broadband sensors \\
\midrule
\yblt & photobiologyPhy  & funs + data & phytochromes \\
\yblt & photobiologyCry  & funs + data & cryptochromes \\
\rblt & photobiologyPhot & funs + data & phototropins \\
\rblt & photobiologyUVR8 & funs + data & phototropins \\
\midrule
\gblt & photobiologygg  & funtions       & extensions to package \code{ggplot2} \\
\midrule
\rblt & rTUV             & funs + data & TUV model interface \\
\yblt & rOmniDriver      & functions   & control of Ocean Optics spectrometers \\
\bottomrule
\end{tabular}
\end{small}
\end{table}

One of the main difficulties when working with spectral data is that one may need to operate on data sets measured at different wavelength values and steps sizes. The functions in the suite handle any mismatch by interpolation before applying operations or functions. Although by default functions expect spectral data on energy units, this is just a default that can be changed by setting the parameter \code{unit.in = "photon"}. Across all data sets and functions wavelength vectors have name \code{w.length}, spectral (energy) irradiance \code{s.e.irrad}, photon spectral irradiance \code{s.q.irrad}\footnote{\code{q} derives from `quantum'.}, absorbance ($\log_{10}$-based) \code{A}, transmittance (fraction of one) \code{Tfr}, transmittance (\%) \code{Tpc}, reflectance (fraction of one) \code{Rfr}, and reflectance (\%) \code{Rpc}.

Wavelengths should always be in nm, and when conversion between energy and photon based units takes place no scaling factor is used (an input in \wattnm yields an output in \molnm rather than \umolnm).

The suite is still under active development. Even those packages marked as `stable' are likely to acquire new functionality. By stability, we mean that we hope to be able to make most changes backwards compatible, in other words, we hope they will not break existing user code.

%%%%
\section{\lowercase{\code{r4photo}} repository}\label{sec:photoCRAN}
% \lowercase needed for page headers

I have created a small repository for the packages. This repository follows the CRAN folder structure, so now package installation can be done using just the normal R commands. This means that dependencies are installed automatically, and that automatic updates are possible. The build most suitable for the current system and R version is also picked automatically if available. It is normally recommended that you do installs and updates on a clean R session (just after starting R or RStudio).For easy installation and updates of packages, the r4photo repository can be added to the list of repositories that R knows about.

Whether you use RStudio or not it is possible to add the r4photo repository to the current session as follows, which will give you a menu of additional repositories to activate:

<<eval=FALSE, tidy=FALSE>>=
setRepositories(graphics = getOption("menu.graphics"),
                ind = NULL,
                addURLs = c(photoCRAN =
                      "http://www.mv.helsinki.fi/aphalo/R"))
@

If you know the indexes in the menu you can use this code, where ‘1’ and ‘6’ are the entries in the menu in the command above.

<<eval=FALSE, tidy=FALSE>>=
setRepositories(graphics = getOption("menu.graphics"),
                ind = c(1, 6),
                addURLs = c(photoCRAN =
                      "http://www.mv.helsinki.fi/aphalo/R"))
@

Be careful not to issue this command more than once per R session, otherwise the list of repositories gets corrupted by having two repositories with the same name.

Easiest is to create a text file and name it `\code{.Rprofile}'. The commands above (and any others you would like to run at R start up) should be included, but with the addition that the package names for the functions need to be prepended. The minimum needed is.

<<eval=FALSE, tidy=FALSE>>=
utils::setRepositories(graphics = getOption("menu.graphics"),
                ind = c(1, 6),
                addURLs = c(photoCRAN =
                      "http://www.mv.helsinki.fi/aphalo/R"))
@

The \code{.Rprofile} file located in the current folder is sourced at R start up. It is also possible to have such a file affecting all of the user's R sessions, but its location is operating system dependent, it is in most cases the what the OS considers the current user's \textit{HOME} directory or folder (e.g. `My Documents' in recent versions of MS-Windows). If you are using RStudio, after setting up this file, installation and updating of the packages in the suite can take place exactly as for any other package archived at CRAN.

The commands and examples below can be used at the R prompt and in scripts whether RStudio is used or not.

After adding the repository to the session, it will appear in the menu when executing this command:
<<eval=FALSE>>=
setRepositories()
@
and can be enabled and disabled.

In RStudio, after adding the r4photo repository as shown above, the photobiology packages can be installed and uninstalled through the normal RStudio menus and dialogues, and will listed after typing the first few characters of their names. For example when you type ‘photob’ in the packages field, all the packages with names starting with ‘photob’ will be listed.

They can be also installed at the R command prompt with the followwing command:
<<eval=FALSE>>=
install.packages(c("photobiologyAll", "photobiologygg"))
@


and updated with:
<<eval=FALSE>>=
update.packages()
@


The added repository will persist only during the current R session. Adding it permanently requires editing the R configuration file, as discussed above. Take into consideration that .Rprofile is read by R itself, and will take effect whether you use RStudio or not. It is possible to have a user wide .Rprofile file, and a different one on those folders needing different settings. There many options that can be modified by means of commands in the .Rprofile file.

\section{How to install the packages}

The examples given in this page assume that ‘r4photo’ is not in the list of repositories known to the current R session. See the section \ref{sec:photoCRAN} on the r4photo repository for a better alternative to the approach given here. We mention these other comands because they may be useful in cases when the user does not have write access to his/hers home directory, or just wants to try the packages.

To install the latest version of one package (photobiology used as example) you just need to indicate the repository. However this simple command will only install the dependencies between the different photobiology packages.
<<eval=FALSE, tidy=FALSE>>=
install.packages("photobiology",
                 repos = "http://www.mv.helsinki.fi/aphalo/R")
@

To update what is already installed, this command is enough (even if the packages have been installed manually before):

<<eval=FALSE>>=
update.packages(repos = "http://www.mv.helsinki.fi/aphalo/R")
@


The best way to install the packages is to specify both the r4photo repository and a normal CRAN repository, then all dependencies will be automatically installed. The package photobiolgyAll just loads and imports all the packages in the suite, except for photobiolygg. Because of this dependency all the packages are installed unless already installedby issuing this command.
<<eval=FALSE, tidy=FALSE>>=
install.packages(c("photobiologyAll", "photobiologygg"),
         repos = c(photoCRAN =
                     "http://www.mv.helsinki.fi/aphalo/R",
                   CRAN =
                     "http://cran.rstudio.com"))
@

This example also shows how one can use an array of package names (in this example all currently available “photobiology” packages) in the call to the function install.packages, this is useful if you want to install only a subset of the files, or if you want to make sure that any older install of the packages is overwritten:
<<eval=FALSE, tidy=FALSE>>=
photobiology_packages <- c("photobiology",
    "photobiologyVIS", "photobiologyUV",
    "photobiologyCry", "photobiologyPhy",
    "photobiologyLamps", "photobiologyLEDs",
    "photobiologySun", "photobiologygg",
    "photobiologyFilters",  "photobiologySensors")

install.packages(photobiology_packages,
         repos = c(photoCRAN =
                     "http://www.mv.helsinki.fi/aphalo/R",
                   CRAN =
                     "http://cran.rstudio.com"))
@

The commands above install all packages in the suite and all their dependencies from CRAN if needed. The following command will update all the packages currently installed (if new versions are available) and install any new dependencies.

<<eval=FALSE, tidy=FALSE>>=
update.packages(repos =
                  c(photoCRAN =
                      "http://www.mv.helsinki.fi/aphalo/R",
                    CRAN =
                      "http://cran.rstudio.com"))
@

The instructions above should work under Windows as long as you have a supported version of R (3.0.0 or later) because I have built suitable binaries, under other OSs you may need to add type="source" unless this is already the default. We will try to build OS X binaries for Mac so that installation is easier. Meanwhile if installation fails try adding type="source" to the commands given above. For example the first one would become:

<<eval=FALSE, tidy=FALSE>>=
install.packages("photobiology",
                 repos = "http://www.mv.helsinki.fi/aphalo/R",
                 type="source")
@


When using type=”source” you may need to install some dependencies like the splus2R package beforehand from CRAN if building it from sources fails.
