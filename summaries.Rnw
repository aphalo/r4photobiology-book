<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
opts_chunk$set(opts_fig_wide)
@

\chapter{Spectra: simple summaries and features}\label{chap:summ:spct}

%\begin{abstract}
%  In this chapter we explain how to obtain different summaries common to all types of spectral data. In addition we describe how to extract spectral features from spectral data.
%\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(photobiology)
library(photobiologyWavebands)
library(ggplot2)
library(ggspectra)
library(photobiologyLamps)
library(photobiologyFilters)
library(polynom)
@

\section{Task: Printing spectra}

Spectral\index{spectral data!print} objects are printed with a special \code{print} method that is an extension to the print method for \code{tibble} objects, consequently, it is possible to use options from package \pkg{tibble} to control printing. The first option set below, \code{tibble.print\_max}, sets the number of rows above which only `head' rows are printed and \code{tibble.print\_min} sets the number of rows printed when the head is printed. Another option, \code{tibble.width} sets width of the output printed for \code{tibble} objects with many columns.

<<printing-spct>>=
options(tibble.print_max = 4, tibble.print_min = 4)
@

The number of rows printed can be also controlled through an explicit argument to the second parameter of \code{print}, \code{head}, and \code{tail}. Setting an option by means of \code{options} changes the default behaviour of \code{print}, but explicit arguments can still be used for changing this behaviour in an individual statement.

\section{Task: Summaries related to object properties}\label{sec:summaries:wavelength}

In the case of the \code{summary} method\index{spectral data!summary}, specializations for \code{source\_spct} and \ldots are provided. But for other spectral objects, the \code{summary} method for \code{data.table} is called. For the \code{summary} specializations defined, the corresponding \code{print} method specializations are also defined.

<<summary-spct>>=
summary(sun.spct)
@

\section{Task: Integrating spectral data}

Package \PB provides specific functions for frequently used quantities, but in addition `general purpose' function is available to add flexibility for special cases. Function \code{integrate\_spct}\index{spectral data!integral} takes into account each individual wavelength step, so it returns valid results even for spectra measured at arbitrary and varying wavelength steps. This function operates on all \code{numeric} variables contained in a spectral object except for \code{w.length}. The returned value is expressed as a total per spectrum. See section \ref{sec:algo:integration} for details on the integration algorithm used and an explanation of why in most cases adding up the spectral values leads to wrong estimates.

<<integrate-spct>>=
integrate_spct(sun.spct)
@

\section{Task: Averaging spectral data}

Package \PB provides specific functions for frequently used quantities, but in addition `general purpose' function is available to add flexibility for special cases. Function \code{average\_spct}\index{spectral data!average} takes into account each individual wavelength step, so it returns valid results even for spectra measured at arbitrary and varying wavelength steps. This function operate on all \code{numeric} variables contained in a spectral object except for \code{w.length}. The returned value is expressed per nanometre.

<<average-spct>>=
average_spct(sun.spct)
@

%%%%
\section{Task: Summaries related to wavelength}\label{sec:summaries:wavelength}

Functions \code{max}\index{spectral data!wavelength max}, \code{min}\index{spectral data!wavelength min}, \code{range}\index{spectral data!wavelength range}, \code{midpoint}\index{spectral data!wavelength midpoint} when used with an object of class \code{generic\_spct} (or a derived class) return the result of applying these functions to the \code{w.length} component of these objects, returning always values expressed in nanometres as long as the objects have been correctly created.

<<wl-summaries01>>=
range(sun.spct)
midpoint(sun.spct)
max(sun.spct)
min(sun.spct)
@

Functions \code{expanse} anad \code{stepsize}\index{spectral data!wavelength stepsize} are generics defined in package \PB. \code{expanse}\index{spectral data!wavelength spread} returns maximum less minimum wavelengths values in nanometres, while \code{stepsize} returns a numeric vector of length two with the maximum and the minimum wavelength step between observations, also in nanometers.

<<wl-summaries02>>=
expanse(sun.spct)
stepsize(sun.spct)
@

\section{Task: Finding the class of an object}\label{sec:summaries:class}

R method \code{class} can be used with any R object, including spectra.

<<class-spct01>>=
class(sun.spct)
class(polyester.spct)
@

The method \code{class\_spct} is a convenience wrapped on \code{class} which returns only class attributes corresponding to spectral classes defined in package \PB.

<<class-spct02>>=
class_spct(sun.spct)
class_spct(polyester.spct)
@

The method \code{is.any\_spct} is a synonym of \code{is.generic\_spct} as \code{generic\_spct} is the base class from which all spectral classes are derived.
<<class-spct03>>=
is.any_spct(sun.spct)
is.any_spct(polyester.spct)
@

Equivalent methods exist for all the classes defined in package \PB. We show two examples below, with a radiation source and a filter.

<<class-spct04>>=
is.source_spct(sun.spct)
is.source_spct(polyester.spct)
@

<<class-spct05>>=
is.filter_spct(sun.spct)
is.filter_spct(polyester.spct)
@

\section{Task: Querying other attributes}\label{sec:summaries:attributes}

Both\index{spectral data!metadata attributes} \code{response\_spct} and \code{source\_spct} objects have an attribute \code{time.unit} that can be queried.

<<attr-spct01>>=
getTimeUnit(sun.spct)
@

<<attr-spct02>>=
is_effective(sun.spct * CIE())
is_effective(sun.spct * UV())
@

<<attr-spct03>>=
getBSWFUsed(sun.spct * CIE())
@

Normalization and scaling can be applied to different types of spectral objects. See sections \ref{sec:algo:normalization} on page \pageref{sec:algo:normalization} and \ref{sec:algo:scaling} on page \pageref{sec:algo:scaling} for an explanation of these operations.

<<attr-spct04>>=
sun.norm.spct <- normalize(sun.spct, norm = 600)
is_normalized(sun.norm.spct)
getNormalized(sun.norm.spct)
@

<<attr-spct05>>=
sun.scaled.spct <- fscale(sun.spct, f = "mean")
is_scaled(sun.scaled.spct)
@

We now consider \code{filter\_spct} objects (see Chapter \ref{chap:trans:refl} for an explanation of the meaning of these attributes and how they affect calculations).

<<attr-spct06>>=
getTfrType(polyester.spct)
@

and  \code{reflector\_spct} objects.

<<attr-spct07>>=
getRfrType(metals.mspct$gold)
@

\section{Task: Query how spectral data contained is expressed}

We first consider the case of \code{source.spct} objects.
If an object contains the same data expressed differently, it is possible, as in the example for both statement to return true.

<<attr-spct08>>=
head(sun.spct)
is_energy_based(sun.spct)
is_photon_based(sun.spct)
@

If we delete the energy based spectral data, the result of the test changes.

<<attr-spct09>>=
my.spct <- sun.spct
my.spct$s.e.irrad <- NULL
head(my.spct)
is_energy_based(my.spct)
is_photon_based(my.spct)
@

We now consider \code{filter\_spct} objects.

<<attr-spct10>>=
is_transmittance_based(polyester.spct)
is_absorbance_based(polyester.spct)
@

\section{Task: Querying about `origin' of data}

All\index{spectral data!normalization\index{spectral data!re-scaling}} spectral objects (\code{generic\_spct} and derived types) can be queried whether they are the result of the normalization or re-scaling of another spectrum. In the case of normalization, the normalization wavelength in nanometres is returned, otherwise a logical value.

<<is-transf01>>=
is_normalized(sun.spct)
is_scaled(sun.spct)
@

\code{source\_spct} objects can be queried to learn if they are the result of a calculation involving a weighting function.

<<is-transf02>>=
is_effective(sun.spct)
@

\section{Task: Plotting a spectrum}

Method\index{spectral data!plot} \code{plot} is defined for \code{waveband} objects, and can be used to visually check their properties. Plotting is discussed in detail in chapter \ref{chap:plotting}.

<<sum-plot-spct01>>=
autoplot(sun.spct)
@

<<sum-plot-spct02>>=
autoplot(polyester.spct)
@

\section{Task: Other R's methods}

Methods \code{names} and \code{comment} should work as usual. In the case of the comment attribute, most operations on spectral objects preserve comments, sometimes with additions, or by merging of comments from operands. Comments are optional, so for some objects \code{comment} may return a \code{NULL}. As some comments contain new line characters, to get them printed nicely we need to use \code{cat}.

<<methods-other-spct01>>=
names(sun.spct)
cat(comment(sun.spct))
@

\section{Task: Extract peaks and valleys}\label{sec:summaries:peaks}

Methods\index{spectral data!find peaks}\index{spectral data!find valleys} \code{peaks} and \code{valleys} can be used on most spectral objects to find local maxima and local minima in spectral data. They return an object of the same class containing only the observations corresponding to these local extremes.

We first show the use of function \code{peaks} that returns a subset of the spectral containing peaks (local maxima). The parameter \code{span} determines the number of discrete \code{w.length} values used to find a local maximum (the higher the value used, the fewer maxima are detected), with a \code{NULL} span returning the overall maximum. The \code{span} is always defined using an odd number of observations, if an even number is provided as argument, it is increased by one, with a warning. The parameter \code{ignore\_threshold} indicates the fraction of the total span along the spectral variable, such as spectral irradiance for \code{source\_spct} objects, that is taken into account (a value of 0.75, requests only peaks in the upper 25\% of the $y$-range to be returned; a value of -0.75 works similarly but for the lower half of the $y$-range)\footnote{In the current example setting \code{ignore\_threshold} equal to 0.75 given that the range of the spectral irradiance data goes from 0.00~\umolnm to \Sexpr{round(max(sun.spct$s.e.irrad), 2)}~\umolnm, causes any peaks having a spectral irradiance of less than \Sexpr{round(max(sun.spct$s.e.irrad) * 0.75, 2)} \umolnm to be ignored.}.

Using default \code{span} and then a relatively large value of 51.

<<peaks-spct01>>=
peaks(lamps.mspct$philips.tl12)
peaks(lamps.mspct$philips.tl12, span = 51)
@

Using \code{NULL} as argument for span is interpreted as meaning the whole wavelength range of the spectral data, and always returns only the highest values in the spectrum.

<<peaks-spct02>>=
peaks(lamps.mspct$philips.tl12, span = NULL)
@

Using threshold we can limit the search for peaks to only part of the $y$-range of the data. This is useful when peaks in ``low ares'' of the curve are of no interest.

<<peaks-spct03>>=
peaks(sun.spct,
      span=31,
      ignore_threshold=0.2)
peaks(sun.spct,
      span=31,
      ignore_threshold=0.8)
@

It is also possible to convert how the returned spectral irradiance is expressed.

<<peaks-spct04>>=
peaks(lamps.mspct$philips.tl12, unit.out = "photon")
@

All the examples earlier in this section also apply to other types of spectra, and to \code{valleys} in addition to \code{peaks}.

<<peaks-spct05>>=
valleys(filters.mspct$Schott_KG5)
peaks(filters.mspct$Schott_KG5, filter.qty = "absorbance")
@

A \code{peaks} method is also defined in this package for numeric vectors, returning the values at the peaks.

<<peaks-spct06>>=
peaks(sun.spct$s.e.irrad)
@

The parameters of the numeric specializations behave in the same way as in the case of spectra. As an example we use \code{span}.

<<peaks-spct07>>=
peaks(sun.spct$s.e.irrad, span = NULL)
@

\subsection{Task: finding the location of peaks as an index into vectors with spectral data}

Low level functions for finding peaks and valleys in numeric vectors are also defined in \pkg{photobiology}. We recommend using the functions in the previous section whenever possible, as the use of the functions \code{find\_peaks} and \code{get\_peaks}, requires the user to validate the data.

Function \code{find\_peaks}, takes as argument a \code{numeric} vector, and returns a logical vector of the same length, with \code{TRUE} for local maxima and \code{FALSE} for all other observations. Infinite values are discarded.

<<peaks-spct11>>=
head(find_peaks(sun.spct$s.e.irrad))
@

To obtain the indexes, one can use R's function \code{which}.

<<peaks-spct12>>=
head(which(find_peaks(sun.spct$s.e.irrad)))
@

%%
\subsection{Task: Extracting peaks and valleys using vectors}\label{sec:get:pk:vly}

Extracting peaks and valleys, is more conveniently done with functions \code{peaks} and \code{valleys}. Function \code{get\_peaks} described in this section, is used internally in package \pkg{photobiology}. It returns a \code{data.frame} object with columns \code{x}, \code{y} and \code{labels}, with \code{labels}. The other arguments are as described above.

<<find-peaks-0>>=
head(with(sun.spct,
          get_peaks(w.length, s.e.irrad, span = 31)))
@

With \code{span = NULL} only the tallest peak is returned.

<<find-peaks-1>>=
head(with(sun.spct,
          get_peaks(w.length, s.e.irrad, span = NULL)))
@

The equivalent function for finding valleys is \code{get\_valleys} taking the same parameters as \code{get\_peaks} but returning the wavelengths at which the valleys are located.

<<find-valleys-2>>=
head(with(sun.spct,
          get_valleys(w.length, s.e.irrad, span = 51)))
@

\section{Task: Refining the location of peaks and valleys}\label{sec:summaries:peak:refine}

The functions described in the previous sections locate the observation with the locally highest, or locally smallest $y$-value. This is in most cases \emph{not} the true location of the peaks as they may fall in between two observations along the wavelength axis. By fitting a suitable model to describe the shape of the observed peak, which is the result of the true peak and the slit function of the spectrometer, the true location of a peak can be approximated more precisely. There is no universally useful model, so we show some examples of possible methods of peak-position refinement.

Some of the functions that could be fitted are suitable for both symmetrically shaped and asymmetrically shaped peaks, while others are suitable only for cases when one peak shoulder is the mirror image of the other. Frequently it is not necessary, or even advantageous, to fit the spectral data all the way down to the baseline, when the aim is to obtain the location of a peak rather than its area.

\subsection{Bell-shaped function}

In the example below, we will fit a non-linear function to the peak. In the first statement we locate the tallest peak as described above. In the second statement we refine its location. For this approach to work, the peaks should be well above the baseline, relatively narrow, and not very close to each other. We use the spectral irradiance emitted by an UV-C (\emph{germicidal}) lamp as an example. We fit a function of the form:

\begin{equation}
  I = d + a \cdot \mathrm{e}^{-0.5 \cdot ((\lambda - c) / b)^2}
\end{equation}

<<fit-nls-peak01>>=
peak <- peaks(lamps.mspct$germicidal, span = NULL)[1, "w.length"]
wl.tmp <- seq(round(peak - 5), round(peak + 5), length.out = 101)
neighbourhood.spct <- clip_wl(lamps.mspct$germicidal, range = wl.tmp)
fit <- nls(s.e.irrad ~ d + a1*exp(-0.5*((w.length-c1)/b1)^2),
           start=list(a1=3.1, b1=1, c1=peak, d=0),
           data=neighbourhood.spct)
fit
fit$m$getPars()[["c1"]]
peak
@

In this case the fitted position of the peak was close to the pixel with maximum reading as the wavelength resolution of the instrument is good. The result suggests a small wavelength calibration error for the spectrometer that can be calculated as:

<<fit-nls-peak02>>=
signif(fit$m$getPars()[["c1"]], 7) - 253.6517 # nm
@

<<fit-nls-peak03>>=
predicted <- predict(fit, data.frame(w.length = wl.tmp))
fitted_peak.spct <- source_spct(w.length  = wl.tmp,
                                s.e.irrad = predicted)
@

<<fit-nls-peak04>>=
ggplot(data = fitted_peak.spct) +
  geom_line(data = fitted_peak.spct, colour = "blue") +
  geom_point(data = neighbourhood.spct, colour = "red", size = 3) +
  xlim(range(wl.tmp))
@

\begin{shaded}
The fit above is not as good as one would like, both at the peak and at the short-wavelength shoulder. Of course other functions can be used, and additional examples of functions and peak shapes will be added here in later drafts.
\end{shaded}

\subsection{Spline with a single node}

I will try here the use of Prunty's equations.

\subsection{Spline with three nodes}


<<>>=
try(detach(package:photobiologyFilters))
try(detach(package:photobiologyLamps))
try(detach(package:ggspectra))
try(detach(package:ggplot2))
try(detach(package:photobiologyWavebands))
try(detach(package:photobiology))
@
