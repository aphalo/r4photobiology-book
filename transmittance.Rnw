<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Transmission and reflection}\label{chap:trans:refl}

%\begin{abstract}
%
%\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(photobiology)
library(photobiologyWavebands)
library(photobiologyFilters)
library(photobiologyLEDs)
@

%%%%
\section{Introduction}

\Attention{scattering by filters and reflectors} In\index{transmittance} this chapter we explain how to do calculations related to the description of absorption and reflection of UV and VIS radiation. Is important to be aware that in the same way as solar radiation has direct and diffuse components because of interactions in the atmosphere, the same phenomena affect light traversing a glass or plastic filter, or the tissues of an organism.

Depending on how transmittance is measured, it includes or not the effect of the reflections at the filter surfaces (called total and internal transmittance, respectively). If transmittance is measured with an integrating sphere, all scattered transmitted radiation is measured. However, if no integrating sphere is used, depending on the distance to the detector and how much scattering is present, the transmittance may be drastically underestimated.

An equivalent problem due to scattering occurs when measuring reflectance. Depending on the type of surface and material reflectance and total transmitatnce can strongly depend on the angle of incidence of the light beam. A special case are \emph{interference} filters, as not only the transmittance itself but also the wavelengths transmitted depend on the angle of incidence of radiation.

If you are not familiar with the phenomena described above, and the different ways in which optical properties of filters and reflectors can be characterized, please, read the introductory chapter in Part A, before attempting the calculation described below.

\section{Task: absorbance and transmittance}\label{sec:transmittance}

\textbf{Transmittance}\index{transmittance}\Attention{} is defined as:
\begin{equation}
\tau(\lambda) = \frac{I}{I_0} = \frac{\sirr}{\sirr[0]} = \frac{\spfd}{\spfd[0]}
\end{equation}

Given this simple relation $\tau(\lambda)$ can be calculated as a division between two "source\_spct" objects. This gives the correct answer, but as an object of class "source.scpt".

<<eval=FALSE>>=
tau <- spc_above / spc_below
@

\textbf{Absorptance}\index{absorptance}\Attention{} is just $1 - \tau(\lambda)$, but should be distinguished from \textbf{absorbance}\index{absorbance} ($A(\lambda)$) which is measured on a logarithmic scale:

\begin{equation}
A(\lambda) = -{\log}_{10} \frac{I}{I_0}\label{eq:absorbance}
\end{equation}

\begin{framed}
\ilAttention In chemistry 10 is always used as the base of the logarithm, but in other contexts sometimes $\mathrm{e}$ is used as base. In the \rpsuite{} absorbance is always calculate according to equation \ref{eq:absorbance} using ${\log}_{10}$. User input during construction of \code{filter\_spct} objects from spectral absorbance data is also assumed to be expressed in this same way.
\end{framed}

Given the simple equation, $A(\lambda)$ can be also easily calculated using the operators for spectra. This gives the correct answer, but in an object of class "source.scpt".

The conversion between $\tau(\lambda)$ and $A(\lambda)$ is:

\begin{equation}
A(\lambda) = -{\log}_{10} \tau(\lambda)
\end{equation}

which in S language is:

<<eval=FALSE>>=
my_T2A <- function(x) {-log10(x)}
@

The conversion between  $A(\lambda)$ and $\tau(\lambda)$ is:

\begin{equation}
\tau(\lambda) = 10^{-A(\lambda)}
\end{equation}

which in S language is:

<<eval=FALSE>>=
my_A2T <- function(x) {10^-x}
@

Instead of these functions, the package \PB defines generic functions and specialized functions, that can be used on numeric vectors and on \code{filter\_spct} objects. The functions defined above could be directly applied to vectors but doing this on a column in a \code{filter\_spct} is more cumbersome. As the spectra objects are data.tables, one can add a new column, say with transmittances to a copy of the filter data as is shown in the next section.


%%%%
\section{Task: spectral absorbance from spectral transmittance}\label{sec:trans:T2A}

Using \code{filter\_spct} objects, the calculations become very simple.

<<>>=
my_gg400.spct <- filters.mspct$GG400
T2A(my_gg400.spct)
a.gg400.spct <- T2A(my_gg400.spct, action="replace")
@

As in addition to the \code{T2A} method for \code{filter\_spct} there is a \code{T2A} method available for numeric vectors.

<<>>=
my_gg400.spct <- filters.mspct$GG400
my_gg400.spct$A <- T2A(my_gg400.spct$Tfr)
my_gg400.spct
@

or even on single numeric values:
<<>>=
T2A(0.001)
@

%%%%
\section{Task: spectral transmittance from spectral absorbance}

Please, see section \ref{sec:trans:T2A} for more details in the description of the method \code{T2A} which does the opposite conversion than the method \code{A2T} needed for this task, but which works similarly.

<<>>=
A2T(a.gg400.spct)
A2T(a.gg400.spct, action="replace")
@

%%%%
\section{Task: transmitted spectrum from spectral transmittance and spectral irradiance}

When we multiply a \code{source\_spct} by a \code{filter\_spct} we obtain as a result a new \code{source\_spct}.

<<>>=
class(sun.spct)
class(filters.mspct$GG400)
@

<<>>=
filtered_sun.spct <- sun.spct * filters.mspct$GG400
class(filtered_sun.spct)
head(filtered_sun.spct)
@

The result of the calculation can be directly used as an argument, for example, when calculating irradiance.

<<>>=
q_irrad(sun.spct, UV()) * 1e6
q_irrad(filtered_sun.spct, UV()) * 1e6
q_irrad(sun.spct * filters.mspct$GG400, UV()) * 1e6
@

<<>>=
q_irrad(sun.spct * my_gg400.spct) * 1e6
@

%%%%
\section{Task: reflected spectrum from spectral reflectance and spectral irradiance}

When we multiply a \code{source\_spct} by a by a \code{reflector\_spct} we obtain as a result a new \code{source\_spct}.

If in the examples from the previous section one replaces the transmittance spectrum by a reflection spectrum, one obtains the spectrum of the reflected radiation given a certain spectrum of incident light.

%%%%
\section{Task: total spectral transmittance from internal spectral transmittance and spectral reflectance}\label{sec:}

\index{transmittance}\index{reflectance}
%%%%
\section{Task: combined spectral transmittance of two or more filters}\label{sec:}

\subsection{Ignoring reflectance}


\subsection{Considering reflectance}

%%%%
\section{Task: light scattering media (natural waters, plant and animal tissues)}\label{sec:}


\section{Task: simulating the spectral irradiance under a LED luminaire}

To conclude the chapter, we show how combining different operations described in this and earlier chapters one can do interesting simulations of estimations.

If we want to predict the output of a light source composed of different lamps or LEDs we can add the individual spectral irradiance, but using data measured from the target positions of each individual light source. If we want then to add the effect of a filter we must multiply by the filter transmittance. Bellow we simulate a (bad?) light source for plant cultivation.

We first would need to scale the normalized spectral irradiance for each LED based on their relative relative absolute output. For simplicity, we assume they will powered so that they will output equal amounts of energy as visible radiation. Even under this assumption, as the width of emission peaks depend on the type of LED, we need to scale these data. We will scale them using defaults.

<<>>=
red_led.spct <- fscale(leds.mspct$NHXRGB090_R)
blue_led.spct <- fscale(leds.mspct$NHXRGB090_B)
@

We next assume that we use five red LEDs for each blue LED, and protect them with a sheet of clear Plexiglas.

<<>>=
my_luminaire.spct <-
  (red_led.spct * 5 + blue_led.spct) *
      filters.mspct$Clear_0A000_XT
class(my_luminaire.spct)
@

We now assume that the PAR photon irradiance on a horizontal plane below the luminaire is 250 \umol.

<<>>=
my_luminaire.spct <- fscale(my_luminaire.spct,
                        f = q_irrad,
                        w.band = PAR(),
                        target = 250e-6)
setScaled(my_luminaire.spct, FALSE) # to avoid warnings
class(my_luminaire.spct)
@

Finally we calculate photon irradiances and photon ratios for some bands of interest for plant responses.

<<>>=
q_ratio(my_luminaire.spct,
             list(Red(), Blue(), Green()), PAR())
q_irrad(my_luminaire.spct,
             list(PAR(), Red(), Blue(), Green())) *  1e6
@

<<>>=
try(detach(package:photobiologyLEDs))
try(detach(package:photobiologyFilters))
try(detach(package:photobiologyWavebands))
try(detach(package:photobiology))
@

