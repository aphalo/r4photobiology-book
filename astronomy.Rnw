\chapter{Astronomy}\label{chap:astronomy}

\begin{abstract}
  In this chapter we explain how to code some astronomical computations in R.
\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<>>=
library(photobiology)
library(RgoogleMaps)
library(lubridate)
@

%%%%
\section{Introduction}\label{sec:physics:intro}

%%%%
\section{The Sun}\label{sec:physics:intro}

In function \code{day\_night} from our \code{photobiology} package we use function \code{sun\_angles}, which is an edited version of function \code{sunAngle} from package \code{ode}, to calculate the altitude or elevation of the sun. \code{uniroot} finds by iteration the root (the time when then elevation angle, adjusted for twilight angle, equals zero).


One could also use R's built-in functions for POSIXct but package \code{lubridate} makes working with dates and times, much easier. As first example, we just accept the default of zero longitude and  latitude, giving the day length at the equator:

<<>>=
day_night(ymd("2013-12-01"))
@

Package \code{lubridate} also defines other functions for dates, and each of the functions can decode dates in different formats as long as the year, month and date order in the string agrees with the name of the function:
<<>>=
ymd("20140320")
ymd("2014-03-20")
ymd("14-03-20")
ymd("2014-3-20")
ymd("2014/3/20")
dmy("20032014")
mdy("03202014")
@

In the we use \code{getGeoCode} to get the latitude and longitude of cities. \code{getGeoCode} accepts any valid Google Maps search terms, including street addresses, and postal codes within cities. We calculate the day length for Buenos Aires:

<<>>=
geo_code <- getGeoCode("Buenos Aires")
geo_code
day_night(ymd("2013-12-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
day_night(ymd("2013-06-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
@

For Munich:

<<>>=
geo_code <- getGeoCode("Munich")
geo_code
day_night(ymd("2013-12-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
day_night(ymd("2013-06-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
@

For Joensuu:

<<>>=
geo_code <- getGeoCode("Joensuu")
geo_code
day_night(ymd("2013-12-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
day_night(ymd("2013-06-21"),
          lon = geo_code["lon"], lat = geo_code["lat"])
@

For Joensuu, equinox day:

<<>>=
geo_code <- getGeoCode("Joensuu")
geo_code
day_night(ymd("2013-09-23"),
          lon = geo_code["lon"], lat = geo_code["lat"])
day_night(ymd("2013-09-23"),
          lon = geo_code["lon"], lat = geo_code["lat"],
          twilight="civil")
day_night(ymd("2013-09-23"),
          lon = geo_code["lon"], lat = geo_code["lat"],
          twilight="nautical")
day_night(ymd("2013-09-23"),
          lon = geo_code["lon"], lat = geo_code["lat"],
          twilight="astronomical")
@

\code{sun\_angles} not only returns solar elevation, but all the angles defining the position of the sun. The time argument to \code{sun\_angles} should be in UTC (universal time coordinates, which is equal to GMT) time zone, but we can easily convert another time zone to UTC with the function \code{with\_tz} from package \code{lubridate}.

<<>>=
geo_code <- getGeoCode("Joensuu")
geo_code
my_time <- ymd_hms("2014-05-29 18:00:00", tz="EET")
sun_angles(with_tz(my_time, "UTC"),
         lon = geo_code["lon"], lat = geo_code["lat"])
@

Where was the sun when I run the code to generate this .PDF file?

<<>>=
geo_code <- getGeoCode("Joensuu")
geo_code
my_time <- now()
sun_angles(with_tz(my_time, "UTC"),
         lon = geo_code["lon"], lat = geo_code["lat"])
@


