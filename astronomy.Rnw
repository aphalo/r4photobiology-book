<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Astronomy}\label{chap:astronomy}

%\begin{abstract}
%  In this chapter we explain how to code some astronomical computations in R.
%\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(photobiology)
library(lubridate)
library(ggplot2)
library(ggmap)

cache <- FALSE
@

%%%%
\section{Introduction}\label{sec:astro:intro}

\subsection{Time coordinates}

This\index{time!coordinates} chapter deals with calculations that require times and/or dates as arguments. One could use R's built-in functions for POSIXct but package \pkg{lubridate} makes working with dates and times, much easier. Package \pkg{lubridate} defines functions for decoding dates represented as character strings, and for manipulating dates and doing calculations on dates. Each one of the different functions shown in the code chunk below can decode dates in different formats as long as the year, month and date order in the string agrees with the name of the function.

<<>>=
ymd("20140320")
ymd("2014-03-20")
ymd("14-03-20")
ymd("2014-3-20")
ymd("2014/3/20")
dmy("20.03.2014")
dmy("20032014")
mdy("03202014")
@

Similar functions including hours, minutes and seconds are defined by \code{lubridate} as well as functions for manipulating dates, and calculating durations with all the necessary and non-trivial corrections needed for leap years, summer time, and other idiosyncracies of the calendar system.

\begin{framed}
\ilAttention{} Times\label{alert:time:zone} and dates are stored in R objects in Universal Time Coordinates (UTC), but the time zone (\code{tz}) used for input and output can vary widely. The UTC `time zone' corresponds to the Greenwich meridian without any shifts due to daylight-saving time throughout the year. The time offset between local time and UTC can vary throughout the year due to day-light saving times---winter vs.\ summer time---, or accross years through changes in legislation---e.g.\ date when when daylight saving time starts and ends, or changes in the geographical borders between time zones, or a country adopting a different time zone. Different names and abbreviations are used, for the same time zones. Examples of time zones are EET or Eastern European Time, CET or Central European Time. Functions in package \pkg{lubridate} are of help for getting around these conversions but one should be always very careful as many functions use as default the `locale' and `TZ' settings queried from the operating system as defaults. This means that data saved at a different geographic location or using a computer with wrong settings, or saving data using a remote (e.g.\ cloud) server located in a different time zone, can all result in misinterpretation of time data. Furthermore, the same R script may yield different output when run in a different time zone, unless time zone is explicitly passed as an argument. This problem does not only affect times, but also dates.
\end{framed}

<<>>=
ymd("20140320") # no time zone set, Date object
ymd("20140320", tz = "Europe/Helsinki") # Eastern Europe
ymd("20140320", tz = "America/Buenos_Aires") # Argentina
ymd("20140320", tz = "Asia/Tokyo") # Japan
# time set according to time zone
ymd_hm("20140320 00:00") # assumes local tz, POSIXct object
ymd_hm("20140320 00:00", tz = "Europe/Helsinki") # central Europe
ymd_hm("20140320 00:00", tz = "America/Buenos_Aires") # Argentina
ymd_hm("20140320 00:00", tz = "Asia/Tokyo") # Central Australia
@

In the example above, the data are read using the supplied time zone, and printed back in a the same time zone. An example follows whose result depends on the local time zone where this file is run.

<<>>=
# this is just a date object, which ignores the time zone
ymd("20140320") # assumes local tz, POSIXct object
with_tz(ymd("20140320"), tzone = "America/Buenos_Aires")
# this is a POSIXct date + time object
ymd_hm("20140320 00:00") # assumes local tz, POSIXct object
with_tz(ymd_hm("20140320 00:00"), tzone = "America/Buenos_Aires")
# current system time zone
Sys.timezone()
@

\begin{framed}
\ilAttention{} We should make explicit the time zones used for both input and output to avoid any ambiguities.
\end{framed}

<<>>=
with_tz(ymd("20140320", tz = "America/Buenos_Aires"), tzone = "Europe/London")
with_tz(ymd("20140320", tz = "Asia/Tokyo"), tzone = "America/Buenos_Aires")
with_tz(ymd_hm("20140320 00:00", tz = "America/Buenos_Aires"), tzone = "Asia/Tokyo")
with_tz(ymd_hm("20140320 00:00", tz = "Asia/Tokyo"), tzone = "America/Buenos_Aires")
@

\subsection{Geographic coordinates}

For\index{geographic coordinates}\index{geocode}\index{latitude}\index{longitude} astronomical calculations we also need as argument geographical coordinates. One can supply latitude and longitude values, acquired with a GPS instrument or read from a map. However, when the location is searchable through Google Maps, it is also possible to obtain the coordinates on-the-fly. A query can be run from within R using packages \pkg{RgoogleMaps}, or \pkg{ggmap}, as done here---of course this requires internet access. When inputting coordinate values manually, they should in degrees as numeric values (in other words the fractional part is given as part of floating point number in degrees, and not as separate integers representing minutes and seconds of degree). Latitudes N are given by positive numbers and and latitudes S by negative numbers. Longitudes W of Greenwich are given as positive numbers and longitudes E of Greenwich as negative numbers. The latitude and longitude must be in variables named \code{lat} and \code{lon} in a data frame. A third variable, \code{address}, is recognized and copied unchanged to the output. The address is optionally included in the search result from Google maps. The address returned is not necessarily the searched term, and is useful when using partial addresses as search terms, as the hit, may not be the intended location.

<<astro-geocode-1, message=my.debug, cache=cache>>=
geocode("Helsinki")
geocode("Viikinkaari 1, 00790 Helsinki, Finland")
geocode("Viikinkaari 1, 00790 Helsinki, Finland", output = "latlona")
@

\subsection{Algorithms and peculiarities}

\Advanced{algorithms for astronomical calculations}The code uses the well known algorithms by Meeus \autocite{MeeusXXXX} implemented in the R language as a translation of code used in NOAA's calculation worksheets. We have compared the results from our functions against the NOAA on-line calculator. Julian day calculations do not use the same algorithms as NOAA, but instead, use the \code{julian} function from base R and time zone and daylight saving times based on package \pkg{lubridate}. Handling of time zones and daylight saving times is very tricky for past dates, as country boundaries have changed as well as legislation over the years and centuries. The further back in history one goes, the less reliable calculations expressed in local time become. Of course UTC times, and local solar time values can be trusted for any epoch for which the algorithm is valid. The algorithm is precise enough to ensure valid results into the far past, but the calculation of julian dates may be less or more precise in R than other implementations. Agreement with the NOAA calculator is good as far back as we have tested, dates about 1000 years before now.
 
%%%%
\section{Task: calculating the length of the photoperiod}\label{sec:astro:photoperiod}

Functions\index{day length}\index{night length}\index{photoperiod}\index{scotoperiod} \code{day\_length} and \code{night\_length} have the same parameter signature. They are vectorized for the \code{date} parameter and for \code{geocode} with multiple rows, and in the this last case also \code{tz} is vectorized.

Calculating the length of the current day is easy. We use the Greenwich meridian, and 60 degrees in the Northern and Southern hemispheres. We use function \code{today} from package \pkg{lubridate}.

<<>>=
day_length(today(), geocode = data.frame(lat = 60, lon = 0))
@

<<>>=
day_length(today(), geocode = data.frame(lat = -60, lon = 0))
@

In the case of daylength calculations the longitude is almost irrelevant, and defaults to zero degrees. As the date defaults to `today' the code above can be simplified.

<<>>=
day_length(geocode = data.frame(lat = -60, lon = 0))
@

Function \code{geocode} from package \pkg{ggmap} returns suitable values in a \code{data.frame} based on search term(s). The returned value is a data frame, which can be passed as argument for parameter \code{geocode}.  The use of Google search has some restrictions that you will need to check before any intense or commercial use of their service.

<<message=my.debug>>=
my.city <- geocode('Helsinki', output = "latlona")
my.city
@

We can calculate the photoperiod for the current day as

<<>>=
day_length(geocode = my.city)
@

Or if we give a date explicitly using functions from package \pkg{lubridate}.

<<>>=
day_length(ymd("2015-06-09"),
           geocode = my.city)
day_length(dmy("9.6.2015"),
           geocode = my.city)
@

Or for several consecutive days by supplying a vector of dates as argument.

<<>>=
my.dates <- seq(ymd("2015-01-01"), ymd("2015-12-31"), by = "month")
day_length(my.dates, geocode = my.city)
@

Or to get the results as a data frame.

Default time zone of \code{ymd} is UTC or GMT, but one should set the same time zone as will be used for further calculations.

<<>>=
photoperiods.df <-
  data.frame(date = my.dates,
             photoperiod = day_length(my.dates, geocode = my.city))
@

The six lines at the top of the output are

<<>>=
head(photoperiods.df, 6)
@

The complementary function \code{night\_length} gives

<<>>=
night_length(ymd("2015-06-09"),
             geocode = my.city)
@

Using the functions as described above, `measures' the photoperiod according to a boundary between day and night at a solar elevation angle equal to zero. An additional parameter of the functions, described in section \ref{sec:sun:times}, allows setting this twilight angle in degrees or by name according to different twilight angle definitions.

\section{Task: Calculating times of sunrise, solar noon and sunset}\label{sec:sun:times}

Functions\index{sunset!time of}\index{sun rise!time of}\index{solar noon!time of}\index{noon|see {solar noon}} \code{sunrise\_time}, \code{sunset\_time}, and \code{noon\_time} have the same parameter signature---take the same arguments---but the values they return differ.

Be also aware that for summer dates the times are expressed accordingly. In the examples below this can be recognized for example, by the time zone being reported as EEST instead of EET for Eastern Europe.

\begin{framed}
\ilAttention{} Both latitude and longitude can be supplied, but be aware that if the returned value is desired in the local time coordinates, the time zone should match that in use at the location and date of interest. Longitude is not enough, as time zones depend on country boundaries, and in some cases administrative or other boundaries within countries. The period of the year when daylight saving time has been in effect depends on legislation in effect at the date of interest, as well as on the administrative boundaries at the time. It is best to use UTC whenever considering times in the past or future.
\end{framed}

<<>>=
sunrise_time(today(tzone = "UTC"),
             geocode = data.frame(lat = 60, lon = 0),
             tz = "UTC")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "UTC")
@

The angle used in the twilight calculation can be supplied, either as the name of a standard definition, or as an angle in degrees (negative for sun positions below the horizon). Positive angles can be used when the time of sun occlusion behind a building, mountain, or other obstacle needs to be calculated.

<<>>=
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             twilight = "civil")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             twilight = -10)
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             twilight = +12)
@

Default latitude is zero (the Equator), the default longitude is zero (Greenwich), and default time zone for the functions in the \pkg{photobiology} package is \code{"UTC"}. The default for \code{date} is the current day in time zone UTC. Using defaults the code is simpler, but this is not a good approach for scripts.

<<>>=
sunrise_time(geocode = data.frame(lat = 60, lon = 0))
@

By default a POSIXct object is returned. This object described a date and time in UTC. It is portable and safe. However, if one needs the time of the day as numeric value, one can supply additional arguments.

<<>>=
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             unit.out = "days")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             unit.out = "hours")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             unit.out =  "minutes")
sunrise_time(today(tzone = "Europe/Helsinki"),
             geocode = data.frame(lat = 60, lon = 25),
             tz = "Europe/Helsinki",
             unit.out = "seconds")
@

We can reuse the array of dates from section \ref{sec:astro:photoperiod}, and the coordinates of Joensuu, to calculate the time at sunrise through the year.

<<>>=
time_at_sunrise.df <- sunrise_time(my.dates,
                                   geocode = my.city,
                                   tz = "Europe/Helsinki")
@

The six lines at the top of the output are

<<>>=
head(time_at_sunrise.df, 6)
@

The complementary functions \code{sunset\_time} and \code{noon\_time} take exactly the same arguments as \code{sunrise\_time}, but \code{noon\_time} ignores any argument supplied for \code{twilight}.

<<>>=
sunrise_time(today(tzone = "UTC"),
                   geocode = data.frame(lat = 60, lon = 0),
                   tz = "UTC")
sunset_time(today(tzone = "UTC"),
                  geocode = data.frame(lat = 60, lon = 0),
                  tz = "UTC")
noon_time(today(tzone = "UTC"),
          geocode = data.frame(lat = 60, lon = 0),
          tz = "UTC")
@

Function\Advanced{day events} \code{day\_night} returns a list with the different times with a single call. As other functions described in this chapter, \code{day\_night} is vectorised for the \code{date} parameter.

<<>>=
day_night(today(tzone = "UTC"),
                geocode = data.frame(lat = 60, lon = 0),
                tz = "UTC")
@

\begin{example}
\caption[Astronomical calculations]{Astronomical calculations of the sun position}
Function\index{sun!position in the sky} \code{sun\_angles}, which is a modified version of function \code{sunAngle} from package \pkg{ode} is used to calculate the elevation of the sun at given time and geographical coordinates. To calculate the times corresponding to a given solar elevation, the algorithm first searches for the local solar noon by finding the maximal solar elevation, and then searches for sunrise in the first half of the day and for sunset in the second half local solar day. Sunset and sunrise are by default based on a solar elevation angle equal to zero. However, an argument can be passed to parameter \code{twilight} to set the angle according to different conventions---civil, nautical, astronomical---, by giving one or two values for the angles. Day and night durations are calculated as time durations between sunrise and sunset (the default) or dusk and dawn or some other angle. The algorithm currently used is valid for years 1950--2050.
\end{example}

As in earlier examples, we use \code{geocode} to obtain the latitude and longitude of cities, although for precise calculations for large cities using a street address or at least a postal code in addition to the name of the city is preferable. The calculations below are for Buenos Aires on two different dates, by use of the optional argument \code{tz} we request the results to be expressed in local time for Buenos Aires.

<<astro-geocode-2, message=my.debug, cache=cache>>=
geocode_BA <- geocode("Buenos Aires")
day_night(ymd("2013-12-21"),
          geocode = geocode_BA,
          tz = "America/Buenos_Aires")
@

Or with \code{unit.out} set to \code{"hour"}

<<astro-geocode-2a, message=my.debug, cache=cache>>=
day_night(ymd("2013-12-21"),
          geocode = geocode_BA,
          tz = "America/Argentina/Buenos_Aires",
          unit.out = "hour")
@

Next,\Advanced{twilight} we calculate day length  based on different definitions of twilight for Helsinki, at the equinox:

<<astro-geocode-4, message=my.debug, cache=cache>>=
geocode_He <- geocode("Helsinki")
geocode_He
day_length(ymd("2013-09-21"),
          geocode = geocode_He)
day_length(ymd("2013-09-21"),
          geocode = geocode_He,
          twilight = "civil")
day_length(ymd("2013-09-21"),
          geocode = geocode_He,
          twilight = "nautical")
day_length(ymd("2013-09-21"),
          geocode = geocode_He,
          twilight = "astronomical")
@

Or for a given angle in degrees, which for example can be positive in the case of an obstacle like a building or mountain, instead of negative as used for twilight definitions. In the case of obstacles the angle will be different for morning and afternoon, and can be entered as a numeric vector of length two.

<<>>=
day_length(ymd("2013-09-21"),
          geocode = geocode_He,
          twilight = c(20, 0))
@

\section{Task: calculating the position of the sun}\label{sec:astro:position}

Function \code{sun\_angles}\index{sun!position in the sky} not only returns solar elevation, it returns all the angles defining the position of the sun. The time argument to \code{sun\_angles} is internally converted to UTC (universal time coordinates, which is equal to GMT) time zone, so time defined for any time zone is valid input. The time zone used by default for the output can vary as described in page \pageref{alert:time:zone}, so it is more reliable specify the time coordinates used for the output with parameter \code{tz}, using arguments valid for pacakge \code{lubridate}---which is used internally by package \pkg{photobiology}.

<<astro-geocode-5, message=my.debug, cache=cache>>=
geocode_Jo <- geocode("80100 Joensuu, Finland")
geocode_Jo
my_time <- ymd_hms("2014-05-29 18:00:00", tz="EET")
sun_angles(my_time,
           geocode = geocode_Jo)
@

If we do not supply a time as argument, \code{sun\_angles} calculates the current position of the sun---or at the time indicated by the computer. In this case giving the position of the sun in the sky of Joensuu at the time this .PDF file was generated.

<<>>=
sun_angles(geocode = geocode_Jo)
@

\section{Task: plotting sun elevation through a day}

Function\index{sun!position in the sky!plot} \code{sun\_angles} described above is vectorised, so it is very easy to calculate the position of the sun throughout a day at a given location on Earth. The example here uses only solar elevation, plotted for Helsinki through the course of 23 June 2014. We first create a vector of times, using \code{seq} which can be used with dates in addition to numbers. In the case of dates the argument passed to parameter \code{by} is specified as a string.

<<>>=
opts_chunk$set(opts_fig_wide_full)
@

<<astro-6, cache=cache>>=
hours <- seq(from = ymd("2014-06-23", tz = "EET"),
             by = "3 min",
             length.out = 24 * 20)
angles_He <- sun_angles(hours,
                        geocode = geocode_He)
head(angles_He)
@

We also create an auxiliary data frame with data for plotting and labeling the different conventional definitions of \emph{twilight}.

<<astro-7, cache=cache>>=
twilight <-
  data.frame(angle = c(0, -6, -12, -18),
             label = c("Horizon", "Civil twilight",
                       "Nautical twilight",
                       "Astronomical twilight"),
             time = rep(ymd_hms("2014-06-23 12:00:00",
                                tz="EET"),
                        4) )
@

We draw a plot of solar elevations through a day, using the data frames created above.

<<astro-8-elevation>>=
ggplot(angles_He,
       aes(x = time, y = elevation)) +
  geom_line() +
  geom_hline(data=twilight,
             aes(yintercept = angle, linetype=factor(label))) +
  annotate(geom="text",
           x=twilight$time, y=twilight$angle,
           label=twilight$label, vjust=-0.4, size=4) +
  labs(y = "Solar elevation at Helsinki (degrees)",
       x = "Time EEST")
@

We\Advanced{azimuth} draw a plot of solar azimuths through a day, using the data frames created above.

<<astro-8-azimuth>>=
ggplot(angles_He,
       aes(x = time, y = azimuth)) +
  geom_line() +
  scale_y_continuous(breaks = c(0,90,180,270,360),
                     limits = c(-20,380)) +
  labs(y = "Solar azimuth at Helsinki (degrees)",
       x = "Time EEST")
@

\section{Task: plotting day or night length through the year}

We use function \code{day\_night()} to calculate simulataneously several values, although this function is slower it returns a data frame that makes coding easier. We create a \code{days} vector, and create a vector of geocodes by searching city names. We take advantage of vectorization to obtain a dataframe. We add a factor with the names of the locations.

<<astro-12a>>=
days <- seq(from = ymd("2016-01-01"), to = ymd("2016-12-31"), by = 7)
cities <- c("Ivalo, Finland", "Helsinki, Finland", "Athens, Greece")
geocodes <- geocode(cities, output = "latlona")
times <-
   day_night(date = days,
             geocode = geocodes,
             tz = "EET",
             unit.out = "hour")
@

We can list the variables in the data frame.

<<astro-12aa>>=
names(times)
@

We plot day length using \pkg{ggplot2}. The last two lines of code are optional. We use \code{geom\_point} to highlight that the calcualtions have not been done for each day. Ivalo is above the northern polar circle, so in winter nights last for 24~h and in summer days last for 24~h.

<<astro-12b>>=
ggplot(times,
       aes(x = day, y = daylength, colour=address)) +
  geom_line() +
  scale_y_continuous(breaks=c(0,12,24), limits=c(0,24)) +
  labs(x = "Date", y = "Day length (h)", colour="Location")
@

For plotting \code{nightlength} we just need to map it to the $y$ aesthetic
instead pf \code{daylength} and its corresponding axis label.

\section{Task: plotting local time at sunrise}

We reuse the data frame from the previous section.
The breaks in the lines are the result of the changes between winter and summer time coordinates in the EET zone. The points indicate the calculated values, once per week.

<<astro-12c>>=
ggplot(times,
       aes(x = day, y = sunrise, colour=address)) +
  geom_line() + geom_point() +
  scale_y_continuous(breaks=c(0,6,12), limits=c(0,14)) +
  labs(x = "Date", y = "Local time at sunrise (h)", colour="Location")
@

By replacing the mapping of \code{sunrise\_time} by \code{sunset\_time} to $y$ in the code above and editing the axis label of the plot one can produce a similar plot of sunset times.

In general scale limts must be selected with care when dealing with civil time coordinates as it can be shifted by a few hours from solar time at some geographic locations.

\section{Task: plotting solar time at sunrise}


<<>>=
try(detach(package:ggmap))
try(detach(package:ggplot2))
try(detach(package:lubridate))
try(detach(package:photobiology))
@
