<<echo=FALSE, cache=FALSE>>=
set_parent('r4p.main.Rnw')
opts_knit$set(concordance=TRUE)
@

\chapter{Colour}\label{chap:colour}

%\begin{abstract}
%  In this chapter we explain how to use colours according to visual sensitivity. For example calculating red-green-blue (RGB) values for humans.
%\end{abstract}

\section{Packages used in this chapter}

For executing the examples listed in this chapter you need first to load the following packages from the library:
<<message=my.debug>>=
library(photobiology)
library(photobiologyWavebands)
@

\section{Introduction}

The\index{color|see {colour}}\index{colour} calculation of equivalent colours and colour spaces is based on the number of photoreceptors and their spectral sensitivities. For humans it is normally accepted that there are three photoreceptors in the eyes, with maximum sensitivities in the red, green, and blue regions of the spectrum.

When calculating colours we can take either only the colour or both colour and apparent luminance. In our functions, in the first case one needs to provide as input `chromaticity coordinates' (CC) and in the second case `colour matching functions' (CMF). The suite includes data for humans, but the current implementation of the functions should be able to handle also calculations for other organisms with tri-chromic vision.

The functions allow calculation of simulated colour of light sources as R colour definitions. Three different functions are available, one for monochromatic light taking as argument wavelength values, and one for polychromatic light taking as argument spectral energy irradiances and the corresponding wave length values. The third function can be used to calculate a representative RGB colour for a band of the spectrum represented as a range of wavelengths, based on the assumption of a flat energy irradiance across this range.

By default CIE coordinates for \textit{typical} human vision are used, but the functions
have a parameter that can be used for supplying a different chromaticity definition. The range of wavelengths used in the calculations is that in the chromaticity data.

One use of these functions is to generate realistic colour for `key' on plots of spectral data. Other uses are also possible, like simulating how different, different objects would look to a certain organism.

%%%%
\section{Task: calculating an RGB colour from a single wavelength}\label{sec:color:wl}

Method\index{colour!calculation from wavelength} \code{color} can be used in this case. If a vector of wavelengths is supplied as argument, then a vector of \code{color}s, of the same length, is returned. Here are some examples of calculation of R color definitions for monochromatic light:

<<>>=
color(550) # green
color(630) # red
color(380) # UVA
color(750) # far red
color(c(550, 630, 380, 750)) # vectorized
@

%%%%
\section{Task: calculating an RGB colour for a range of wavelengths}\label{sec:color:range}

Method\index{colour!calculation from wavelength range} \code{color} can be used also in this case, but we need to supply the range of wavelengths as a \code{waveband} object. The details of how to construct a \code{waveband} object are described in This function assumes a flat energy spectral irradiance curve within the range. Some examples:
Examples for wavelength ranges:

<<>>=
color(waveband(c(400,700)))
color(PAR())
color(Yellow())
@

%%%%
\section{Task: calculating an RGB colour for spectrum}\label{sec:color:spc}

Method\index{colour!calculation from spectrum} \code{color} is also defined for spectral objects.

Examples for spectra, in this case the solar spectrum:

<<>>=
color(sun.spct)
color(sun.spct, type = "CMF") # colour matching function
color(sun.spct, type = "CC")  # colour coordinates
color(sun.spct * yellow_gel.spct)
@

\section{A sample of colours}

Here we plot the RGB colours for the range covered by the CIE 2006 proposed standard calculated at each 1 nm step:

<<echo=FALSE, include=FALSE, cache=FALSE>>=
opts_chunk$set(opts_fig_wide)
@

<<>>=
wl <- c(390, 829)

my.colors <- color(wl[1]:wl[2])

colCount <- 40 # number per row
rowCount <- trunc(length(my.colors) / colCount)

plot( c(1,colCount), c(0,rowCount), type="n",
      ylab="", xlab="",
      axes=FALSE, ylim=c(rowCount,0))
title(paste("RGB colours for",
            as.character(wl[1]), "to",
            as.character(wl[2]), "nm"))

for (j in 0:(rowCount-1))
{
  base <- j*colCount
  remaining <- length(my.colors) - base
  RowSize <-
    ifelse(remaining < colCount, remaining, colCount)
  rect((1:RowSize)-0.5, j-0.5, (1:RowSize)+0.5, j+0.5,
       border="black",
       col=my.colors[base + (1:RowSize)])
}

@

<<>>=
try(detach(package:photobiology))
@
